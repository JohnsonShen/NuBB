<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\ABRobot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\ABRobot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Fri Dec 25 20:20:04 2015
<BR><P>
<H3>Maximum Stack Usage =        720 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; loop &rArr; CommandProcess &rArr; SensorCalibration &rArr; GyroCalibration &rArr; nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[37]">ACMP01_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[35]">ADC00_IRQHandler</a> from battery.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[36]">ADC01_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[38]">ADC02_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[39]">ADC03_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[23]">BRAKE0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[27]">BRAKE1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[40]">CAN0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[f]">CLKFAIL_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[34]">DAC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[10]">Default_Handler</a> from startup_m451series.o(.text) referenced 9 times from startup_m451series.o(RESET)
 <LI><a href="#[15]">EINT0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[16]">EINT1_IRQHandler</a> from ssv7241.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[17]">EINT2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[18]">EINT3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[19]">EINT4_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1a]">EINT5_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1b]">GPA_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1c]">GPB_IRQHandler</a> from battery.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1d]">GPC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1e]">GPD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[1f]">GPE_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[20]">GPF_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[44]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[31]">I2C0_IRQHandler</a> from nvt_i2c.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[32]">I2C1_IRQHandler</a> from nvt_i2c.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[146]">I2C_Callback_Rx_Continue</a> from nvt_i2c.o(.text) referenced from nvt_i2c.o(.text)
 <LI><a href="#[148]">I2C_Callback_Tx_Continue</a> from nvt_i2c.o(.text) referenced from nvt_i2c.o(.text)
 <LI><a href="#[c]">IRC_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[33]">PDMA_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[24]">PWM0P0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[25]">PWM0P1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[26]">PWM0P2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[28]">PWM1P0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[29]">PWM1P1_IRQHandler</a> from ir.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2a]">PWM1P2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[d]">PWRWU_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[e]">RAMPE_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from battery.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[4b]">Reset_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[41]">SC0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[22]">SPI1_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from timer_ctrl.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_m451series.o(.text) referenced from startup_m451series.o(.text)
 <LI><a href="#[12]">TAMPER_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[42]">TK_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2b]">TMR0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2c]">TMR1_IRQHandler</a> from led.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2d]">TMR2_IRQHandler</a> from timer_ctrl.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2e]">TMR3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[2f]">UART0_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[30]">UART1_IRQHandler</a> from gps.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3a]">UART2_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3b]">UART3_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3d]">USBD_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3e]">USBH_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[3f]">USBOTG_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[13]">WDT_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[14]">WWDT_IRQHandler</a> from startup_m451series.o(.text) referenced from startup_m451series.o(RESET)
 <LI><a href="#[46]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m451series.o(.text)
 <LI><a href="#[48]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[47]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4a]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[49]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[43]">main</a> from abrobot.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(.text)
</UL>
<P><STRONG><a name="[2d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2bd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2d5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m451series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannelf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCaptureChannel
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_m451series.o(.text))

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CalibrationFail</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalibrationFail &rArr; Serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[62]"></a>AccCalibration</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AccCalibration &rArr; UpdateFlashCal &rArr; SensorInitMAG &rArr; nvtSetMagCalMatrix &rArr; SetMagGuass &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[69]"></a>GyroCalibration</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = GyroCalibration &rArr; nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroScaleCalibrate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalGyroInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_state
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[6e]"></a>MagCalibration</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = MagCalibration &rArr; nvtCalMAGBufferFill &rArr; MagCalibrate &rArr; calibrate_model_mag &rArr; compute_eigenvalue &rArr; Jacobi_Cyclic_Method &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawMAG
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetMagCalQFactor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalMAGInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalMAGBufferFill
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[74]"></a>SensorCalibration</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SensorCalibration &rArr; GyroCalibration &rArr; nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorInitState
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationFail
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[79]"></a>LoadFlashPID</STRONG> (Thumb, 494 bytes, Stack size 104 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoadFlashPID &rArr; GetFlashPID &rArr; DATA_FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUpdateDT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerInit
</UL>

<P><STRONG><a name="[7d]"></a>controllerInit</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = controllerInit &rArr; LoadFlashPID &rArr; GetFlashPID &rArr; DATA_FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetIntegralLimitLow
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetIntegralLimit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashPID
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizerInit
</UL>

<P><STRONG><a name="[2d6]"></a>controllerTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, controller.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>controllerCorrectRatePID</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = controllerCorrectRatePID
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetDt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetDesired
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUpdateDT
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[84]"></a>controllerCorrectAttitudePID</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = controllerCorrectAttitudePID
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidUpdate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetError
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetDt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetDesired
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUpdateDT
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[86]"></a>controllerCorrectSpeedPID</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerCorrectSpeedPID
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetDt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetDesired
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUpdateDT
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[87]"></a>controllerResetAllPID</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidReset
</UL>

<P><STRONG><a name="[89]"></a>controllerResetYawRatePID</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = controllerResetYawRatePID
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidReset
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[8a]"></a>controllerSetRollPID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetRollPID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[8c]"></a>controllerSetPitchPID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetPitchPID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[8d]"></a>controllerSetYawPID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetYawPID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[8e]"></a>controllerSetRollRatePID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetRollRatePID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[8f]"></a>controllerSetPitchRatePID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetPitchRatePID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[90]"></a>controllerSetYawRatePID</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetYawRatePID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[91]"></a>controllerSetAltHoldPID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>

<P><STRONG><a name="[92]"></a>controllerSetSpeedPID</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = controllerSetSpeedPID
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pidSetPID
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[1ab]"></a>controllerGetActuatorOutput</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = controllerGetActuatorOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[b5]"></a>GetRollPID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
</UL>

<P><STRONG><a name="[b6]"></a>GetPitchPID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
</UL>

<P><STRONG><a name="[b7]"></a>GetYawPID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
</UL>

<P><STRONG><a name="[b8]"></a>GetRollRatePID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
</UL>

<P><STRONG><a name="[b9]"></a>GetPitchRatePID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
</UL>

<P><STRONG><a name="[ba]"></a>GetYawRatePID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
</UL>

<P><STRONG><a name="[bb]"></a>GetAltHoldPID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_althold_pid
</UL>

<P><STRONG><a name="[2d7]"></a>GetSpeedPID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, controller.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>GetUnit32</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetUnit32 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteControl
</UL>

<P><STRONG><a name="[94]"></a>GetPIDValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[95]"></a>GetPIDfloat</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetPIDfloat &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorCal
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[2d8]"></a>GetAltHoldPIDObj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, controller.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>GetSpeedPIDObj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, controller.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>SetPID</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetPID &rArr; GetPIDfloat &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDfloat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetSpeedPID
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetYawRatePID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetPitchRatePID
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetRollRatePID
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetYawPID
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetPitchPID
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetRollPID
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashPID
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[9a]"></a>DATA_FLASH_Write</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DATA_FLASH_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashRxAddress
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[a1]"></a>DATA_FLASH_Read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DATA_FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashRxAddress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashCal
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashPID
</UL>

<P><STRONG><a name="[a6]"></a>FlashInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlashInit &rArr; SetDataFlashBase &rArr; FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadDataFlashBaseAddr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[a8]"></a>UpdateBoardVersion</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateBoardVersion &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashControl
</UL>

<P><STRONG><a name="[ad]"></a>float2dw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float2dw
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[b4]"></a>dw2float</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dw2float
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashCal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashPID
</UL>

<P><STRONG><a name="[ac]"></a>i162dw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i162dw
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashRxAddress
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[b3]"></a>dw2i16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dw2i16
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashRxAddress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashCal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashPID
</UL>

<P><STRONG><a name="[2da]"></a>TestFloat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flashctrl.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>GetBoardVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flashctrl.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>GetFloatCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flashctrl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>UpdateFlashCal</STRONG> (Thumb, 1326 bytes, Stack size 104 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UpdateFlashCal &rArr; SensorInitMAG &rArr; nvtSetMagCalMatrix &rArr; SetMagGuass &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetMagCalMatrix
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetGyroScale
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetGyroOffset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccScale
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccOffset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashState
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i162dw
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2dw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetMagCalQFactor
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashControl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
</UL>

<P><STRONG><a name="[b2]"></a>GetFlashCal</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetFlashCal &rArr; DATA_FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw2i16
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw2float
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
</UL>

<P><STRONG><a name="[99]"></a>UpdateFlashPID</STRONG> (Thumb, 360 bytes, Stack size 104 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UpdateFlashPID &rArr; DATA_FLASH_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i162dw
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2dw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAltHoldPID
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYawRatePID
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPitchRatePID
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRollRatePID
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYawPID
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPitchPID
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRollPID
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[7a]"></a>GetFlashPID</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetFlashPID &rArr; DATA_FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw2i16
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw2float
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashPID
</UL>

<P><STRONG><a name="[bc]"></a>UpdateFlashRxAddress</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, flashctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMatchAddress
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i162dw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
</UL>

<P><STRONG><a name="[be]"></a>GetFlashRxAddress</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, flashctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw2i16
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
</UL>

<P><STRONG><a name="[bf]"></a>FlashControl</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FlashControl &rArr; UpdateFlashCal &rArr; SensorInitMAG &rArr; nvtSetMagCalMatrix &rArr; SetMagGuass &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashPID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[c0]"></a>WaitDataReady</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WaitDataReady &rArr; Serial_available
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_available
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[c1]"></a>setupSystemClock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setupSystemClock &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysTickClockSrc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[c8]"></a>setupCommandUART</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setupCommandUART &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
</UL>

<P><STRONG><a name="[cd]"></a>setupRTC</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setupRTC &rArr; RTC_Open &rArr; RTC_SetDateAndTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTickPeriod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_32KCalibration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[d1]"></a>setupUART</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setupUART &rArr; setupCommandUART &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupCommandUART
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[d2]"></a>setup</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = setup &rArr; SensorsInit &rArr; SensorInitGYRO &rArr; MPU6050_initialize &rArr; MPU6050_testConnection &rArr; MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizerInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABRobotMotorInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRTC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChronographSet
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>CommandProcess</STRONG> (Thumb, 1172 bytes, Stack size 40 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = CommandProcess &rArr; SensorCalibration &rArr; GyroCalibration &rArr; nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteControl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorCal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_available
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIR
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetChip
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBattery
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersion
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDataReady
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[ed]"></a>loop</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = loop &rArr; CommandProcess &rArr; SensorCalibration &rArr; GyroCalibration &rArr; nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssv_rc_update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTickCount
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeRC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;armDetect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBattery
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncFrameCount
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorCalState
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrameCount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLED
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChronographSet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChronographRead
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, abrobot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = main &rArr; loop &rArr; CommandProcess &rArr; SensorCalibration &rArr; GyroCalibration &rArr; nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[d7]"></a>I2C_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; NVT_I2C_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[fe]"></a>I2C_readBytes</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_SetDeviceAddress
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_ReadByteContinue_addr8
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getRotationZ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getRotationY
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getRotationX
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getRotation
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getTemperature
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getAccelerationZ
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getAccelerationY
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getAccelerationX
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getAcceleration
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getMotion6
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readByte
</UL>

<P><STRONG><a name="[101]"></a>I2C_readByte</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getRate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBit
</UL>

<P><STRONG><a name="[102]"></a>I2C_readBits</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getDeviceID
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getClockSource
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getMotionDetectionCounterDecrement
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getFreefallDetectionCounterDecrement
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getFullScaleAccelRange
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getFullScaleGyroRange
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getDLPFMode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getExternalFrameSync
</UL>

<P><STRONG><a name="[103]"></a>I2C_readBit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readByte
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getSleepEnabled
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getYNegMotionDetected
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getIntDataReadyStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getIntI2CMasterStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getAuxVDDIOLevel
</UL>

<P><STRONG><a name="[105]"></a>I2C_readWords</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readWord
</UL>

<P><STRONG><a name="[104]"></a>I2C_readWord</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readWords
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBitW
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBitsW
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBitW
</UL>

<P><STRONG><a name="[106]"></a>I2C_readBitW</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readWord
</UL>

<P><STRONG><a name="[107]"></a>I2C_readBitsW</STRONG> (Thumb, 88 bytes, Stack size 36 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readWord
</UL>

<P><STRONG><a name="[108]"></a>I2C_writeBytes</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_writeBytes &rArr; NVT_WriteByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_WriteByteContinue_addr8
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeByte
</UL>

<P><STRONG><a name="[10a]"></a>I2C_writeByte</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_writeByte &rArr; I2C_writeBytes &rArr; NVT_WriteByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setRate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>

<P><STRONG><a name="[10b]"></a>I2C_writeBit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I2C_writeBit &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setTempSensorEnabled
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setSleepEnabled
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_reset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_resetSensors
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setI2CMasterModeEnabled
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_resetTemperaturePath
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setI2CBypassEnabled
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setAuxVDDIOLevel
</UL>

<P><STRONG><a name="[10c]"></a>I2C_writeBits</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_writeBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setDeviceID
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setClockSource
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setMotionDetectionCounterDecrement
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setFreefallDetectionCounterDecrement
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setFullScaleAccelRange
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setFullScaleGyroRange
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setDLPFMode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setExternalFrameSync
</UL>

<P><STRONG><a name="[10e]"></a>I2C_writeWords</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeWord
</UL>

<P><STRONG><a name="[10d]"></a>I2C_writeWord</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeWords
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBitW
</UL>

<P><STRONG><a name="[10f]"></a>I2C_writeBitW</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeWord
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readWord
</UL>

<P><STRONG><a name="[2dd]"></a>I2C_writeBitsW</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, i2cdev.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>PWM_ConfigOutputChannelf</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PWM_ConfigOutputChannelf &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsInit
</UL>

<P><STRONG><a name="[fb]"></a>motorsStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motorsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[114]"></a>motorsSetRatio</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motorsSetRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distributePower
</UL>

<P><STRONG><a name="[113]"></a>motorsInit</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = motorsInit &rArr; PWM_ConfigOutputChannelf &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsSetRatio
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannelf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizerInit
</UL>

<P><STRONG><a name="[de]"></a>ABRobotMotorInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ABRobotMotorInit &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[e5]"></a>SetMotorCal</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SetMotorCal &rArr; GetPIDfloat &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDfloat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[1a7]"></a>GetMotorCal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distributePower
</UL>

<P><STRONG><a name="[2de]"></a>MPU6050_pgm_read_byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mpu6050.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>MPU6050_getAuxVDDIOLevel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBit
</UL>

<P><STRONG><a name="[117]"></a>MPU6050_setAuxVDDIOLevel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>

<P><STRONG><a name="[118]"></a>MPU6050_getRate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readByte
</UL>

<P><STRONG><a name="[119]"></a>MPU6050_setRate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU6050_setRate &rArr; I2C_writeByte &rArr; I2C_writeBytes &rArr; NVT_WriteByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[11a]"></a>MPU6050_getExternalFrameSync</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[11b]"></a>MPU6050_setExternalFrameSync</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>

<P><STRONG><a name="[11c]"></a>MPU6050_getDLPFMode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[11d]"></a>MPU6050_setDLPFMode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU6050_setDLPFMode &rArr; I2C_writeBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[11e]"></a>MPU6050_getFullScaleGyroRange</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[11f]"></a>MPU6050_setFullScaleGyroRange</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU6050_setFullScaleGyroRange &rArr; I2C_writeBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[120]"></a>MPU6050_getFullScaleAccelRange</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[121]"></a>MPU6050_setFullScaleAccelRange</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU6050_setFullScaleAccelRange &rArr; I2C_writeBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[122]"></a>MPU6050_setI2CBypassEnabled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU6050_setI2CBypassEnabled &rArr; I2C_writeBit &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[123]"></a>MPU6050_getIntI2CMasterStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBit
</UL>

<P><STRONG><a name="[124]"></a>MPU6050_getIntDataReadyStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBit
</UL>

<P><STRONG><a name="[125]"></a>MPU6050_getMotion6</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getMotion9
</UL>

<P><STRONG><a name="[126]"></a>MPU6050_getMotion9</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getMotion6
</UL>

<P><STRONG><a name="[127]"></a>MPU6050_getAcceleration</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU6050_getAcceleration &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadACC
</UL>

<P><STRONG><a name="[128]"></a>MPU6050_getAccelerationX</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[129]"></a>MPU6050_getAccelerationY</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[12a]"></a>MPU6050_getAccelerationZ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[12b]"></a>MPU6050_getTemperature</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperatureRead
</UL>

<P><STRONG><a name="[12c]"></a>MPU6050_getRotation</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU6050_getRotation &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadGYRO
</UL>

<P><STRONG><a name="[12d]"></a>MPU6050_getRotationX</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[12e]"></a>MPU6050_getRotationY</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[12f]"></a>MPU6050_getRotationZ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[130]"></a>MPU6050_getYNegMotionDetected</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBit
</UL>

<P><STRONG><a name="[131]"></a>MPU6050_resetTemperaturePath</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>

<P><STRONG><a name="[132]"></a>MPU6050_getFreefallDetectionCounterDecrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[133]"></a>MPU6050_setFreefallDetectionCounterDecrement</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>

<P><STRONG><a name="[134]"></a>MPU6050_getMotionDetectionCounterDecrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[135]"></a>MPU6050_setMotionDetectionCounterDecrement</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>

<P><STRONG><a name="[136]"></a>MPU6050_setI2CMasterModeEnabled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU6050_setI2CMasterModeEnabled &rArr; I2C_writeBit &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[137]"></a>MPU6050_resetSensors</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>

<P><STRONG><a name="[138]"></a>MPU6050_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU6050_reset &rArr; I2C_writeBit &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[139]"></a>MPU6050_getSleepEnabled</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBit
</UL>

<P><STRONG><a name="[13a]"></a>MPU6050_setSleepEnabled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU6050_setSleepEnabled &rArr; I2C_writeBit &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[13b]"></a>MPU6050_setTempSensorEnabled</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBit
</UL>

<P><STRONG><a name="[13c]"></a>MPU6050_getClockSource</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>

<P><STRONG><a name="[13d]"></a>MPU6050_setClockSource</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU6050_setClockSource &rArr; I2C_writeBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[13e]"></a>MPU6050_getDeviceID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBits
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_testConnection
</UL>

<P><STRONG><a name="[13f]"></a>MPU6050_setDeviceID</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBits
</UL>

<P><STRONG><a name="[142]"></a>MPU6050_ADDR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mpu6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[140]"></a>MPU6050_testConnection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU6050_testConnection &rArr; MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
</UL>

<P><STRONG><a name="[141]"></a>MPU6050_initialize</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU6050_initialize &rArr; MPU6050_testConnection &rArr; MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_testConnection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ADDR
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setClockSource
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setSleepEnabled
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_reset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setI2CMasterModeEnabled
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setI2CBypassEnabled
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setFullScaleAccelRange
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setFullScaleGyroRange
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setDLPFMode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_setRate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
</UL>

<P><STRONG><a name="[143]"></a>I2CX_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>I2C0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_IRQHandler &rArr; I2CX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_IRQHandler &rArr; I2CX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>I2C_Callback_Rx</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, nvt_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[146]"></a>I2C_Callback_Rx_Continue</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Callback_Rx_Continue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvt_i2c.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>I2C_Callback_Tx</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, nvt_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[148]"></a>I2C_Callback_Tx_Continue</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Callback_Tx_Continue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvt_i2c.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>WaitEndFlag0</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableTimeout
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DisableTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_WriteByteContinue_addr8
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_ReadByteContinue_addr8
</UL>

<P><STRONG><a name="[109]"></a>NVT_WriteByteContinue_addr8</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVT_WriteByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetChip
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEndFlag0
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBytes
</UL>

<P><STRONG><a name="[100]"></a>NVT_ReadByteContinue_addr8</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetChip
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEndFlag0
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[fd]"></a>NVT_I2C_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, nvt_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVT_I2C_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetBusClockFreq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[ff]"></a>NVT_SetDeviceAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nvt_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writeBytes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_readBytes
</UL>

<P><STRONG><a name="[7c]"></a>pidInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashPID
</UL>

<P><STRONG><a name="[83]"></a>pidUpdate</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectSpeedPID
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectAttitudePID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectRatePID
</UL>

<P><STRONG><a name="[7e]"></a>pidSetIntegralLimit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerInit
</UL>

<P><STRONG><a name="[7f]"></a>pidSetIntegralLimitLow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerInit
</UL>

<P><STRONG><a name="[88]"></a>pidReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerResetYawRatePID
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerResetAllPID
</UL>

<P><STRONG><a name="[8b]"></a>pidSetPID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetSpeedPID
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetAltHoldPID
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetYawRatePID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetPitchRatePID
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetRollRatePID
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetYawPID
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetPitchPID
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerSetRollPID
</UL>

<P><STRONG><a name="[85]"></a>pidSetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectAttitudePID
</UL>

<P><STRONG><a name="[81]"></a>pidSetDesired</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectSpeedPID
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectAttitudePID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectRatePID
</UL>

<P><STRONG><a name="[2df]"></a>pidGetDesired</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>pidIsActive</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>pidSetKp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>pidSetKi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>pidSetKd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>pidSetDt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectSpeedPID
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectAttitudePID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectRatePID
</UL>

<P><STRONG><a name="[1eb]"></a>constrain</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_I
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
</UL>

<P><STRONG><a name="[d9]"></a>IsSSVConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeRC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCAltitude
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCThrust
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRCConnected
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorArm
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRCChannel
</UL>

<P><STRONG><a name="[77]"></a>RC_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RC_Enable &rArr; RC_PWM_Enable &rArr; GPIO_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_SSV_Enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PWM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[d8]"></a>RC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RC_Init &rArr; RC_SSV_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_SSV_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[153]"></a>readRCChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readRCChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSsvRC
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPwmRC
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeSSVRC
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePwmRC
</UL>

<P><STRONG><a name="[156]"></a>computePwmRC</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = computePwmRC &rArr; readRCChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRCChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeRC
</UL>

<P><STRONG><a name="[157]"></a>computeSSVRC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = computeSSVRC &rArr; readRCChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRCChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeRC
</UL>

<P><STRONG><a name="[f3]"></a>computeRC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = computeRC &rArr; computePwmRC &rArr; readRCChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeSSVRC
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePwmRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[158]"></a>MotorArm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorArm
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_CheckFlyMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlip
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;armDetect
</UL>

<P><STRONG><a name="[15b]"></a>IsRCConnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRCConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVRCConnected
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPWMRCConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[15e]"></a>MotorDisArm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorDisArm
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;armDetect
</UL>

<P><STRONG><a name="[f4]"></a>armDetect</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = armDetect &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_state
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlip
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDisArm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorArm
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[183]"></a>checkArm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[188]"></a>getRC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetThrust
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[1b9]"></a>getValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PWM_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_SSV_Init
</UL>

<P><STRONG><a name="[161]"></a>GetRCThrust</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetRCThrust &rArr; GetSSVThrust
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSSVThrust
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPWMThrust
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetThrust
</UL>

<P><STRONG><a name="[164]"></a>GetRCAltitude</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSSVAltitude
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPWMAltitude
</UL>

<P><STRONG><a name="[167]"></a>report_ahrs_euler</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = report_ahrs_euler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerRPY
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHeadHold
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[16a]"></a>report_ahrs_quaternion</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_ahrs_quaternion &rArr; nvtGetQuaternion
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetQuaternion
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[16c]"></a>report_sensor_raw</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = report_sensor_raw &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawMAG
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawGYRO
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawBARO
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawACC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[170]"></a>report_sensor_calibrated</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_sensor_calibrated &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetCalibratedMAG
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetCalibratedGYRO
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetCalibratedACC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[174]"></a>report_motor_power</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = report_motor_power &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorPower
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[176]"></a>report_pid</STRONG> (Thumb, 340 bytes, Stack size 176 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_pid &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYawPID
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPitchPID
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRollPID
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[177]"></a>report_rate_pid</STRONG> (Thumb, 340 bytes, Stack size 176 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_rate_pid &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYawRatePID
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPitchRatePID
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRollRatePID
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[178]"></a>report_althold_pid</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = report_althold_pid &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAltHoldPID
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[179]"></a>report_velocity</STRONG> (Thumb, 388 bytes, Stack size 120 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = report_velocity &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetVelocity
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetMove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[17d]"></a>report_motor_speed</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_motor_speed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMoveSpeedR
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMoveSpeedL
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[180]"></a>report_actuator_status</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_actuator_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActuator
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[182]"></a>report_rc_status</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = report_rc_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBattery
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHeadFreeMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_GetFlyMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSIf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMatchAddressProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRC
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkArm
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRCConnected
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[189]"></a>report_mode_status</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = report_mode_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagMode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBattery
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHeadFreeMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_GetFlyMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSIf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSSI
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMatchAddressProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLowBattery
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkArm
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[18c]"></a>report_flash_status</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_flash_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashState
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensors
</UL>

<P><STRONG><a name="[e3]"></a>CheckVersion</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckVersion &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[e4]"></a>report_status</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_status
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[f9]"></a>report_sensors</STRONG> (Thumb, 466 bytes, Stack size 8 bytes, report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = report_sensors &rArr; report_rate_pid &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_flash_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_actuator_status
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_speed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_althold_pid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_power
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_quaternion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_euler
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[a9]"></a>GetFlashState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_flash_status
</UL>

<P><STRONG><a name="[2e4]"></a>SetFlashState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>temperatureRead</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sensors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getTemperature
</UL>

<P><STRONG><a name="[18e]"></a>SensorInitACC</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SensorInitACC &rArr; MPU6050_initialize &rArr; MPU6050_testConnection &rArr; MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashCal
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetAccScale
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetAccOffset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetAccG_PER_LSB
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsInit
</UL>

<P><STRONG><a name="[192]"></a>SensorInitGYRO</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SensorInitGYRO &rArr; MPU6050_initialize &rArr; MPU6050_testConnection &rArr; MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashCal
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetGyroScale
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetGyroOffset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetGYRODegPLSB
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsInit
</UL>

<P><STRONG><a name="[78]"></a>SensorInitMAG</STRONG> (Thumb, 910 bytes, Stack size 96 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SensorInitMAG &rArr; nvtSetMagCalMatrix &rArr; SetMagGuass &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashCal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetMagGaussPLSB
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetMagCalMatrix
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[2e5]"></a>SensorInitBARO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>SensorsInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SensorsInit &rArr; SensorInitGYRO &rArr; MPU6050_initialize &rArr; MPU6050_testConnection &rArr; MPU6050_getDeviceID &rArr; I2C_readBits &rArr; I2C_readByte &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[198]"></a>SensorReadACC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SensorReadACC &rArr; MPU6050_getAcceleration &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
</UL>

<P><STRONG><a name="[199]"></a>SensorReadGYRO</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SensorReadGYRO &rArr; MPU6050_getRotation &rArr; I2C_readBytes &rArr; NVT_ReadByteContinue_addr8 &rArr; WaitEndFlag0
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_getRotation
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
</UL>

<P><STRONG><a name="[2e6]"></a>SensorReadMAG</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>SensorReadBARO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>SensorReadSpeed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SensorReadSpeed &rArr; HALL_getSpeed &rArr; GPIO_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_getSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
</UL>

<P><STRONG><a name="[66]"></a>SensorsRead</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SensorsRead &rArr; nvtInputSensorRawACC &rArr; MultiwiiAccFilter &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadSpeed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadGYRO
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadACC
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
</UL>

<P><STRONG><a name="[f2]"></a>SensorsDynamicCalibrate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SensorsDynamicCalibrate &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetGyroOffset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_state
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[75]"></a>GetSensorInitState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[f6]"></a>GetSensorCalState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[2e8]"></a>GetBaroBasePressure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>GetBaroAltitude</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensors.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>GetMoveSpeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[17e]"></a>GetMoveSpeedL</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_speed
</UL>

<P><STRONG><a name="[17f]"></a>GetMoveSpeedR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_speed
</UL>

<P><STRONG><a name="[181]"></a>getActuator</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_actuator_status
</UL>

<P><STRONG><a name="[19f]"></a>HoldHead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
</UL>

<P><STRONG><a name="[169]"></a>getHeadHold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_euler
</UL>

<P><STRONG><a name="[2ea]"></a>HoldHeadFree</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>getMagMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[184]"></a>getHeadFreeMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[dd]"></a>stabilizerInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stabilizer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = stabilizerInit &rArr; controllerInit &rArr; LoadFlashPID &rArr; GetFlashPID &rArr; DATA_FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[1aa]"></a>DetectFlip</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[2eb]"></a>GetAccWZ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>GetFlip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;armDetect
</UL>

<P><STRONG><a name="[159]"></a>ClearFlip</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorArm
</UL>

<P><STRONG><a name="[19e]"></a>commanderGetRPY</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, stabilizer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = commanderGetRPY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldHead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRC
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[1a5]"></a>commanderGetThrust</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stabilizer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = commanderGetThrust &rArr; GetRCThrust &rArr; GetSSVThrust
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCThrust
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRC
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[2ec]"></a>isArmMinThrottle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>GetactuatorThrust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>limitThrust</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>GetMotorPower</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stabilizer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_power
</UL>

<P><STRONG><a name="[2ef]"></a>IsMotorSpin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>GetvSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>SetvSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stabilizer.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>deadband</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stabilizer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[fc]"></a>stabilizer</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, stabilizer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = stabilizer &rArr; commanderGetRPY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorCalState
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerGetActuatorOutput
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerResetYawRatePID
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectSpeedPID
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectAttitudePID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectRatePID
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetThrust
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectFlip
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distributePower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMoveSpeed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetVelocity
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerRPY
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetCalibratedGYRO
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkArm
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[1b1]"></a>SetTickSSVRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2f2]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>DelayLoop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_ctrl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUsec
</UL>

<P><STRONG><a name="[1ac]"></a>DelayUsec</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timer_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
</UL>

<P><STRONG><a name="[ee]"></a>getTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[65]"></a>DelayMsec</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timer_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayMsec
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_initialize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPS
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_write
</UL>

<P><STRONG><a name="[1af]"></a>ChronographStart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
</UL>

<P><STRONG><a name="[d3]"></a>setup_system_tick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setup_system_tick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChronographStart
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timer_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; SysTick_SSV &rArr; SSV7241_TxACKPacket &rArr; SSV7241_FlushTX &rArr; SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVConnected
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvt100usecondTick
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTickSSVRC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>IncFrameCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[f8]"></a>GetFrameCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[e1]"></a>ChronographSet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[f1]"></a>ChronographRead</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[7b]"></a>getUpdateDT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectSpeedPID
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectAttitudePID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerCorrectRatePID
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashPID
</UL>

<P><STRONG><a name="[2f3]"></a>micros</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>millis</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>TMR2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIMER_Enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
</UL>

<P><STRONG><a name="[db]"></a>TIMER_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, timer_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[151]"></a>RC_PWM_Enable</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rc_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_PWM_Enable &rArr; GPIO_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Enable
</UL>

<P><STRONG><a name="[1b8]"></a>RC_PWM_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rc_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValue
</UL>

<P><STRONG><a name="[155]"></a>readPwmRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rc_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPWMThrust
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPWMAltitude
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRCChannel
</UL>

<P><STRONG><a name="[15d]"></a>IsPWMRCConnected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rc_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRCConnected
</UL>

<P><STRONG><a name="[163]"></a>GetPWMThrust</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, rc_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetPWMThrust
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPwmRC
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCThrust
</UL>

<P><STRONG><a name="[166]"></a>GetPWMAltitude</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, rc_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPwmRC
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCAltitude
</UL>

<P><STRONG><a name="[2c]"></a>TMR1_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, led.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>Laser_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Laser_init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2f5]"></a>GetLedState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>LED_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[6c]"></a>led_arm_state</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;armDetect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDisArm
</UL>

<P><STRONG><a name="[2f6]"></a>led_mag_state</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>UpdateLED</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
</UL>

<P><STRONG><a name="[1d3]"></a>Delay1us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacketWithoutAck
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacket
</UL>

<P><STRONG><a name="[15c]"></a>IsSSVRCConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssv7241.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRCConnected
</UL>

<P><STRONG><a name="[186]"></a>GetMatchAddressProcess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssv7241.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[bd]"></a>GetMatchAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashRxAddress
</UL>

<P><STRONG><a name="[1c3]"></a>SetMatchAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssv7241.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[2f7]"></a>CheckLowRSSI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssv7241.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>GetRSSI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssv7241.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
</UL>

<P><STRONG><a name="[187]"></a>GetRSSIf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssv7241.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[1ba]"></a>SPI0_communication</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Buf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>

<P><STRONG><a name="[1bc]"></a>SSV7241_Write_Reg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_communication
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_SetChannel
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_EnableRSSI
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_DYN_ACK
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TX_Mode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RX_Mode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushTX
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushRX
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearMAX_RT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearTX_DS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearRX_DR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOff
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_DisableRSSI
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable_dynamic_payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_DPL
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_ACK_PAY
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[1bd]"></a>SSV7241_Read_Reg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSV7241_Read_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_communication
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_EnableRSSI
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_DYN_ACK
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOn
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TX_Mode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RX_Mode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RxPacket
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearMAX_RT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearTX_DS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearRX_DR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isRXEMPTY
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isTXFULL
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isTXReady
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isRXReady
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOff
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_DisableRSSI
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable_dynamic_payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_DPL
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_ACK_PAY
</UL>

<P><STRONG><a name="[1be]"></a>SSV7241_Feature_ACK_PAY</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
</UL>

<P><STRONG><a name="[1bf]"></a>SSV7241_Feature_DPL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable_dynamic_payload
</UL>

<P><STRONG><a name="[1c0]"></a>SSV7241_Enable_dynamic_payload</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_DPL
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
</UL>

<P><STRONG><a name="[1c1]"></a>SSV7241_Write_Buf</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSV7241_Write_Buf &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_communication
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOn
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacketWithoutAck
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxACKPacket
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacket
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOff
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[1c2]"></a>SSV7241_Init</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashRxAddress
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable_dynamic_payload
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Feature_ACK_PAY
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMatchAddress
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
</UL>

<P><STRONG><a name="[1c4]"></a>SSV7241_Read_Buf</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_communication
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RxPacket
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_CheckID
</UL>

<P><STRONG><a name="[1c5]"></a>SSV7241_DisableRSSI</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_CheckID
</UL>

<P><STRONG><a name="[1c6]"></a>SSV7241_PowerOff</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_CheckID
</UL>

<P><STRONG><a name="[1c7]"></a>SSV7241_CheckID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOff
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_DisableRSSI
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSSVReceiverConnected
</UL>

<P><STRONG><a name="[1c8]"></a>SSV7241_isRXReady</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RxPacket
</UL>

<P><STRONG><a name="[1c9]"></a>SSV7241_isTXReady</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
</UL>

<P><STRONG><a name="[1ca]"></a>SSV7241_isTXFULL</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacketWithoutAck
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacket
</UL>

<P><STRONG><a name="[1cb]"></a>SSV7241_isRXEMPTY</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
</UL>

<P><STRONG><a name="[1cc]"></a>SSV7241_ClearRX_DR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSV7241_ClearRX_DR &rArr; SSV7241_Read_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FHSS_TRIG
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RxPacket
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[1cd]"></a>SSV7241_ClearTX_DS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSV7241_ClearTX_DS &rArr; SSV7241_Read_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxACKPacket
</UL>

<P><STRONG><a name="[1ce]"></a>SSV7241_ClearMAX_RT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>

<P><STRONG><a name="[1cf]"></a>SSV7241_FlushRX</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSV7241_FlushRX &rArr; SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FHSS_TRIG
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RxPacket
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[1d0]"></a>SSV7241_FlushTX</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSV7241_FlushTX &rArr; SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxACKPacket
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxPacket
</UL>

<P><STRONG><a name="[1d1]"></a>SSV7241_RxPacket</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushRX
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearRX_DR
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isRXReady
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Buf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
</UL>

<P><STRONG><a name="[1d2]"></a>SSV7241_TxPacket</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushTX
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isTXFULL
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1us
</UL>

<P><STRONG><a name="[1d4]"></a>SSV7241_TxACKPacket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSV7241_TxACKPacket &rArr; SSV7241_FlushTX &rArr; SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushTX
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearTX_DS
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_address_process
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[1d5]"></a>SSV7241_TxPacketWithoutAck</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_isTXFULL
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1us
</UL>

<P><STRONG><a name="[1d6]"></a>SSV7241_RX_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
</UL>

<P><STRONG><a name="[1d7]"></a>SSV7241_TX_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>

<P><STRONG><a name="[1d8]"></a>SSV7241_PowerOn</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
</UL>

<P><STRONG><a name="[1d9]"></a>SSV7241_Feature_DYN_ACK</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>

<P><STRONG><a name="[1da]"></a>SSV7241_EnableRSSI</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Read_Reg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
</UL>

<P><STRONG><a name="[1db]"></a>SSV7241_SetChannel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSV7241_SetChannel &rArr; SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FHSS_TRIG
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SSV
</UL>

<P><STRONG><a name="[1dc]"></a>SSV7241_InitSPI</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
</UL>

<P><STRONG><a name="[1dd]"></a>SSV7241_FHSS_TRIG</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_SetChannel
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushRX
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearRX_DR
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Enable
</UL>

<P><STRONG><a name="[2f8]"></a>SYS_Delay_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssv7241.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>SSV7241_Enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FHSS_TRIG
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_InitSPI
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_EnableRSSI
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_PowerOn
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_RX_Mode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
</UL>

<P><STRONG><a name="[1df]"></a>match_address_process</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ssv7241.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxACKPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[16]"></a>EINT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssv7241.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[2f9]"></a>GetSSV_TickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssv7241.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>SysTick_SSV</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, ssv7241.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_SSV &rArr; SSV7241_TxACKPacket &rArr; SSV7241_FlushTX &rArr; SSV7241_Write_Reg &rArr; SPI0_communication
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_SetChannel
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_TxACKPacket
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FlushRX
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_ClearRX_DR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Buf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Write_Reg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMatchAddress
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTickSSVRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e0]"></a>SPI_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, rc_ssv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[150]"></a>RC_SSV_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rc_ssv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_SSV_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Enable
</UL>

<P><STRONG><a name="[1e2]"></a>IsSSVReceiverConnected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rc_ssv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_CheckID
</UL>

<P><STRONG><a name="[152]"></a>RC_SSV_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rc_ssv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC_SSV_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Init
</UL>

<P><STRONG><a name="[185]"></a>RC_GetFlyMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc_ssv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[15a]"></a>RC_CheckFlyMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rc_ssv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorArm
</UL>

<P><STRONG><a name="[ef]"></a>ssv_rc_update</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, rc_ssv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[e6]"></a>SetRemoteControl</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rc_ssv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetRemoteControl &rArr; GetUnit32 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnit32
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[154]"></a>readSsvRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rc_ssv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSSVThrust
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSSVAltitude
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRCChannel
</UL>

<P><STRONG><a name="[162]"></a>GetSSVThrust</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rc_ssv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetSSVThrust
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSsvRC
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCThrust
</UL>

<P><STRONG><a name="[165]"></a>GetSSVAltitude</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rc_ssv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSsvRC
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRCAltitude
</UL>

<P><STRONG><a name="[35]"></a>ADC00_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, battery.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, battery.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPB_IRQHandler</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPB_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableInt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableInt
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>Battery_Init</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Battery_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_SetInternalSampleTime
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_Open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[e7]"></a>GetBattery</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLowBattery
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
</UL>

<P><STRONG><a name="[18b]"></a>CheckLowBattery</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckLowBattery
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
</UL>

<P><STRONG><a name="[f0]"></a>UpdateBattery</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[202]"></a>LeadFilterX_get_position</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_velocity
</UL>

<P><STRONG><a name="[203]"></a>LeadFilterY_get_position</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_velocity
</UL>

<P><STRONG><a name="[205]"></a>get_P</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
</UL>

<P><STRONG><a name="[1ea]"></a>get_I</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
</UL>

<P><STRONG><a name="[206]"></a>get_D</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
</UL>

<P><STRONG><a name="[2fa]"></a>reset_PID</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>UBLOX_parse_gps</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_UBLOX_newFrame
</UL>

<P><STRONG><a name="[1ec]"></a>GPS_UBLOX_newFrame</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBLOX_parse_gps
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ef]"></a>isdigit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_coord_to_degrees
</UL>

<P><STRONG><a name="[1ee]"></a>GPS_coord_to_degrees</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>

<P><STRONG><a name="[1f1]"></a>grab_fields</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>

<P><STRONG><a name="[1f2]"></a>hex_c</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>

<P><STRONG><a name="[1f0]"></a>GPS_NMEA_newFrame</STRONG> (Thumb, 582 bytes, Stack size 12 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_c
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grab_fields
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_coord_to_degrees
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_newFrame
</UL>

<P><STRONG><a name="[1f3]"></a>GPS_newFrame</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[1f4]"></a>GPS_calc_longitude_scaling</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_home_position
</UL>

<P><STRONG><a name="[1f7]"></a>GPS_reset_home_position</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerRPY
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[1f9]"></a>wrap_18000</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_missed_wp
</UL>

<P><STRONG><a name="[1fb]"></a>GPS_distance_cm_bearing</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[209]"></a>wrap_36000</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
</UL>

<P><STRONG><a name="[20f]"></a>GPSBufferAvailable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[20b]"></a>GPSBufferRead</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[20e]"></a>GPS_NewData</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTickCount
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBufferRead
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBufferAvailable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_home_position
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_newFrame
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_desired_speed
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_location_error
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_velocity
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_missed_wp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkArm
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSCommandProcess
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPS
</UL>

<P><STRONG><a name="[212]"></a>GPS_UART_HANDLE</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>UART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_UART_HANDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[214]"></a>setupGpsUART</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPS
</UL>

<P><STRONG><a name="[213]"></a>setupGPS</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGpsUART
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[215]"></a>GPSCommandProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[2fb]"></a>GetGPSInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>IrDa_NEC_Rx</STRONG> (Thumb, 1236 bytes, Stack size 24 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IrDa_NEC_Rx &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1P1_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>IrDa_NEC_Rx2</STRONG> (Thumb, 1266 bytes, Stack size 24 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IrDa_NEC_Rx2 &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1P1_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>PWM1P1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWM1P1_IRQHandler &rArr; IrDa_NEC_Rx2 &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetCaptureIntFlag
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ClearCaptureIntFlag
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>Mark</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Mark &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DisableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIR
</UL>

<P><STRONG><a name="[21d]"></a>SPACE</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPACE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIR
</UL>

<P><STRONG><a name="[eb]"></a>SendIR</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SendIR &rArr; SPACE &rArr; TIMER_Delay &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPACE
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[d5]"></a>IR_init</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IR_init &rArr; PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableCaptureInt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableCapture
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCaptureChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[222]"></a>HALL_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>

<P><STRONG><a name="[19b]"></a>HALL_getSpeed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HALL_getSpeed &rArr; GPIO_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadSpeed
</UL>

<P><STRONG><a name="[d4]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Laser_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABRobotMotorInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FHSS_TRIG
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_InitSPI
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PWM_Init
</UL>

<P><STRONG><a name="[1b7]"></a>GPIO_EnableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_FHSS_TRIG
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_getSpeed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PWM_Enable
</UL>

<P><STRONG><a name="[1e5]"></a>GPIO_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>I2C_Open</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
</UL>

<P><STRONG><a name="[2fc]"></a>I2C_Close</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CX_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>I2C_Trigger</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>I2C_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>I2C_EnableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
</UL>

<P><STRONG><a name="[14e]"></a>I2C_GetBusClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
</UL>

<P><STRONG><a name="[2ff]"></a>I2C_SetBusClockFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>I2C_GetIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>I2C_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>I2C_GetData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>I2C_SetData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>I2C_SetSlaveAddr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>I2C_SetSlaveAddrMask</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>I2C_EnableTimeout</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEndFlag0
</UL>

<P><STRONG><a name="[14b]"></a>I2C_DisableTimeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEndFlag0
</UL>

<P><STRONG><a name="[306]"></a>I2C_EnableWakeup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>I2C_DisableWakeup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>I2C_SMBusGetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>I2C_SMBusClearInterruptFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>I2C_SMBusSetPacketByteCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>I2C_SMBusOpen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>I2C_SMBusClose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>I2C_SMBusPECTxEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>I2C_SMBusGetPECValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>I2C_SMBusIdleTimeout</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>I2C_SMBusTimeout</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>I2C_SMBusClockLoTimeout</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>PWM_ConfigCaptureChannel</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PWM_ConfigCaptureChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
</UL>

<P><STRONG><a name="[21e]"></a>PWM_ConfigOutputChannel</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
</UL>

<P><STRONG><a name="[112]"></a>PWM_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsStart
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
</UL>

<P><STRONG><a name="[312]"></a>PWM_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>PWM_ForceStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>PWM_EnableADCTrigger</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>PWM_DisableADCTrigger</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>PWM_ClearADCTriggerFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>PWM_GetADCTriggerFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>PWM_EnableDACTrigger</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>PWM_DisableDACTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>PWM_ClearDACTriggerFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>PWM_GetDACTriggerFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>PWM_EnableFaultBrake</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>PWM_EnableCapture</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
</UL>

<P><STRONG><a name="[31d]"></a>PWM_DisableCapture</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>PWM_EnableOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>

<P><STRONG><a name="[21c]"></a>PWM_DisableOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>

<P><STRONG><a name="[31e]"></a>PWM_EnablePDMA</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>PWM_DisablePDMA</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>PWM_EnableDeadZone</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>PWM_DisableDeadZone</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>PWM_EnableCaptureInt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_EnableCaptureInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
</UL>

<P><STRONG><a name="[322]"></a>PWM_DisableCaptureInt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>PWM_ClearCaptureIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1P1_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>PWM_GetCaptureIntFlag</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_GetCaptureIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1P1_IRQHandler
</UL>

<P><STRONG><a name="[323]"></a>PWM_EnableDutyInt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>PWM_DisableDutyInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>PWM_ClearDutyIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>PWM_GetDutyIntFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>PWM_EnableFaultBrakeInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>PWM_DisableFaultBrakeInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>PWM_ClearFaultBrakeIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>PWM_GetFaultBrakeIntFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>PWM_EnablePeriodInt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>PWM_DisablePeriodInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>PWM_ClearPeriodIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>PWM_GetPeriodIntFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>PWM_EnableZeroInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>PWM_DisableZeroInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>PWM_ClearZeroIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>PWM_GetZeroIntFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>PWM_EnableAcc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>PWM_DisableAcc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>PWM_EnableAccInt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>PWM_DisableAccInt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>PWM_ClearAccInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>PWM_GetAccInt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>PWM_ClearFTDutyIntFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>PWM_GetFTDutyIntFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>PWM_EnableLoadMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>PWM_DisableLoadMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>PWM_ConfigSyncPhase</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>PWM_EnableSyncPhase</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>PWM_DisableSyncPhase</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>PWM_EnableSyncNoiseFilter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>PWM_DisableSyncNoiseFilter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>PWM_EnableSyncPinInverse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>PWM_DisableSyncPinInverse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>PWM_SetClockSource</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>PWM_EnableBrakeNoiseFilter</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>PWM_DisableBrakeNoiseFilter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>PWM_EnableBrakePinInverse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>PWM_DisableBrakePinInverse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>PWM_GetWrapAroundFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>PWM_ClearWrapAroundFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[1b4]"></a>TIMER_Open</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[34b]"></a>TIMER_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>TIMER_Delay</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_Delay &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPACE
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mark
</UL>

<P><STRONG><a name="[34c]"></a>TIMER_EnableCapture</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>TIMER_DisableCapture</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>TIMER_EnableEventCounter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>TIMER_DisableEventCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>SYS_ClearResetSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>SYS_GetBODStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>SYS_GetResetSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>SYS_IsRegLocked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>SYS_ReadPDID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>SYS_ResetChip</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_WriteByteContinue_addr8
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_ReadByteContinue_addr8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[355]"></a>SYS_ResetCPU</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>SYS_ResetModule</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupCommandUART
</UL>

<P><STRONG><a name="[356]"></a>SYS_EnableBOD</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>SYS_DisableBOD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>UART_ClearIntFlag</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>UART_DisableInt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBufferRead
</UL>

<P><STRONG><a name="[35b]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>UART_EnableInt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSBufferRead
</UL>

<P><STRONG><a name="[cc]"></a>UART_Open</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupCommandUART
</UL>

<P><STRONG><a name="[35c]"></a>UART_Read</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>UART_SetLine_Config</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[35d]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>UART_SelectIrDAMode</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[35e]"></a>UART_SelectRS485Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>UART_SelectLINMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>UART_Write</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[22c]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableCKO
</UL>

<P><STRONG><a name="[22b]"></a>CLK_DisableCKO</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>

<P><STRONG><a name="[ca]"></a>CLK_SetModuleClock</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupCommandUART
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>

<P><STRONG><a name="[c9]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRTC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupCommandUART
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>

<P><STRONG><a name="[22d]"></a>CLK_EnableCKO</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>

<P><STRONG><a name="[360]"></a>CLK_PowerDown</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>CLK_Idle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
</UL>

<P><STRONG><a name="[22f]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[c4]"></a>CLK_WaitClockReady</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[c5]"></a>CLK_SetHCLK</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[231]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[230]"></a>CLK_EnablePLL</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[c6]"></a>CLK_SetCoreClock</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[c7]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[c3]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[364]"></a>CLK_DisableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>FMC_SetBootSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[366]"></a>FMC_DisableAPUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>FMC_DisableConfigUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>FMC_DisableLDUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>FMC_EnableAPUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>FMC_EnableConfigUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[36a]"></a>FMC_EnableLDUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>FMC_GetBootSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[a7]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[a3]"></a>FMC_ReadConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_ReadConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[a5]"></a>FMC_WriteConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[36c]"></a>FMC_ENABLE_FREQ_OPTIMIZE_MODE</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>FMC_DISABLE_FREQ_OPTIMIZE_MODE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>SPI_Open</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[36e]"></a>SPI_Close</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>SPI_ClearRxFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>SPI_ClearTxFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>SPI_DisableAutoSS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>SPI_EnableAutoSS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>SPI_SetBusClock</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[373]"></a>SPI_SetFIFO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>SPI_GetBusClock</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[374]"></a>SPI_EnableInt</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>SPI_DisableInt</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>SPI_GetIntFlag</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>SPI_ClearIntFlag</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>SPI_GetStatus</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_communication
</UL>

<P><STRONG><a name="[238]"></a>I2S_Open</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[378]"></a>I2S_Close</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>I2S_EnableInt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>I2S_DisableInt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>I2S_EnableMCLK</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
</UL>

<P><STRONG><a name="[37b]"></a>I2S_DisableMCLK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>I2S_SetFIFO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>EADC_Open</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[37d]"></a>EADC_Close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eadc.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>EADC_ConfigSampleModule</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, eadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[37e]"></a>EADC_SetTriggerDelayTime</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, eadc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>EADC_SetInternalSampleTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[37f]"></a>EADC_SetExtendSAMPLETime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eadc.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[4d]"></a>SendChar_ToUART</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[4e]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[4f]"></a>GetChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteControl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorCal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDfloat
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDValue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnit32
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCalibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[50]"></a>kbhit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[51]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[52]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[53]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[54]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[55]"></a>kbnumbers</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_available
</UL>

<P><STRONG><a name="[56]"></a>Serial_available</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Serial_available
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbnumbers
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDataReady
</UL>

<P><STRONG><a name="[57]"></a>Serial_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[58]"></a>Serial_write</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationFail
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_flash_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_actuator_status
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_speed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_althold_pid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_power
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_quaternion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_euler
</UL>

<P><STRONG><a name="[59]"></a>gpsnumbers</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_available
</UL>

<P><STRONG><a name="[5a]"></a>GPS_available</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPS_available
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsnumbers
</UL>

<P><STRONG><a name="[5b]"></a>GPS_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[5c]"></a>GPS_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPS_write &rArr; DelayMsec
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
</UL>

<P><STRONG><a name="[23a]"></a>RTC_SetDateAndTime</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetDateAndTime
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Open
</UL>

<P><STRONG><a name="[ce]"></a>RTC_Open</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Open &rArr; RTC_SetDateAndTime
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateAndTime
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRTC
</UL>

<P><STRONG><a name="[380]"></a>RTC_Close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>RTC_32KCalibration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_32KCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRTC
</UL>

<P><STRONG><a name="[381]"></a>RTC_GetDateAndTime</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>RTC_GetAlarmDateAndTime</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[23d]"></a>RTC_SetAlarmDateAndTime</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[e8]"></a>RTC_SetDate</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_SetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[e9]"></a>RTC_SetTime</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
</UL>

<P><STRONG><a name="[23e]"></a>RTC_SetAlarmDate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[23f]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[382]"></a>RTC_GetDayOfWeek</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>RTC_SetTickPeriod</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_SetTickPeriod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupRTC
</UL>

<P><STRONG><a name="[1e3]"></a>RTC_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>RTC_DisableInt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPB_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>RTC_EnableSpareAccess</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[241]"></a>RTC_DisableSpareRegister</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[242]"></a>RTC_EnableSnooperDetection</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[243]"></a>RTC_DisableSnooperDetection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitAccessEnable
</UL>

<P><STRONG><a name="[247]"></a>FilterACCInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, acccalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
</UL>

<P><STRONG><a name="[64]"></a>nvtCalACCInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, acccalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
</UL>

<P><STRONG><a name="[244]"></a>UpdateCalibrateInfoACC</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, acccalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateCalibrateInfoACC
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalibrateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[26b]"></a>SetCalibrateACC</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, acccalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
</UL>

<P><STRONG><a name="[171]"></a>nvtGetCalibratedACC</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, acccalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
</UL>

<P><STRONG><a name="[246]"></a>SampleFilter</STRONG> (Thumb, 394 bytes, Stack size 12 bytes, acccalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SampleFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterACCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[67]"></a>nvtCalACCBufferFill</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, acccalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvtCalACCBufferFill &rArr; AccCalibrate &rArr; calibrate_model_acc &rArr; compute_calibration_matrices_acc &rArr; update_calibration_matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCalibrateInfoACC
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
</UL>

<P><STRONG><a name="[191]"></a>nvtSetAccG_PER_LSB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, acccalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
</UL>

<P><STRONG><a name="[279]"></a>SetZWithoutG_Base</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[27e]"></a>GetAHRSPeriod</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuAccIIRLPFilter
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
</UL>

<P><STRONG><a name="[267]"></a>TimerSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroScaleCalibrate
</UL>

<P><STRONG><a name="[24f]"></a>TimerStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroScaleCalibrate
</UL>

<P><STRONG><a name="[266]"></a>TimerRead</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroScaleCalibrate
</UL>

<P><STRONG><a name="[24c]"></a>SensorStateInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[24d]"></a>CalInfoInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[24e]"></a>TimeInfoInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[df]"></a>nvtAHRSInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nvtAHRSInit &rArr; AccFilterInit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeInfoInit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalInfoInit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStateInit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[168]"></a>nvtGetEulerRPY</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvtGetEulerRPY
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetEulerRPY
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_home_position
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_euler
</UL>

<P><STRONG><a name="[16b]"></a>nvtGetQuaternion</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvtGetQuaternion
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6Getquaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_quaternion
</UL>

<P><STRONG><a name="[253]"></a>nvtGetNormAttitude</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetGyro
</UL>

<P><STRONG><a name="[255]"></a>nvtGetNormACC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetAcc
</UL>

<P><STRONG><a name="[257]"></a>nvtGetMAGHeading</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetMagDegree
</UL>

<P><STRONG><a name="[259]"></a>nvtGetEulerNormMAG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetMagEuler
</UL>

<P><STRONG><a name="[25b]"></a>nvtGetNormMAG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetNormMag
</UL>

<P><STRONG><a name="[25d]"></a>nvtGetGYRODegree</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetGyroDeg
</UL>

<P><STRONG><a name="[17a]"></a>nvtGetVelocity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetVelocity
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
</UL>

<P><STRONG><a name="[17b]"></a>nvtGetMove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetMove
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
</UL>

<P><STRONG><a name="[261]"></a>nvtSetMove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6SetMove
</UL>

<P><STRONG><a name="[263]"></a>nvtResetMove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6ResetMove
</UL>

<P><STRONG><a name="[f7]"></a>nvtUpdateAHRS</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nvtUpdateAHRS &rArr; sensfusion9UpdateQ &rArr; sensfusion6UpdateQ &rArr; ComputeEuler &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[269]"></a>nvtMillisecondTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>

<P><STRONG><a name="[1b2]"></a>nvt100usecondTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvt100usecondTick &rArr; CheckSecurityID
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2a2]"></a>GetTickCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMagMasterTime
</UL>

<P><STRONG><a name="[26c]"></a>RawSmoothInput</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RawSmoothInput
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawBARO
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawMAG
</UL>

<P><STRONG><a name="[26d]"></a>RawSmoothOutput</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RawSmoothOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawBARO
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawMAG
</UL>

<P><STRONG><a name="[19c]"></a>nvtInputSensorRawACC</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvtInputSensorRawACC &rArr; MultiwiiAccFilter &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateACC
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRaw9D
</UL>

<P><STRONG><a name="[19d]"></a>nvtInputSensorRawGYRO</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvtInputSensorRawGYRO &rArr; RawSmoothOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateGYRO
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothInput
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsRead
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRaw9D
</UL>

<P><STRONG><a name="[26f]"></a>nvtInputSensorRawMAG</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateMAG
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothInput
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRaw9D
</UL>

<P><STRONG><a name="[271]"></a>nvtInputSensorRawBARO</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothInput
</UL>

<P><STRONG><a name="[272]"></a>nvtInputSensorRaw9D</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawMAG
</UL>

<P><STRONG><a name="[17c]"></a>nvtGetAccZWithoutGravity</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvtGetAccZWithoutGravity
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetAccZWithoutGravity
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[16d]"></a>nvtGetSensorRawACC</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvtGetSensorRawACC &rArr; CheckSecurityID
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRaw9D
</UL>

<P><STRONG><a name="[16e]"></a>nvtGetSensorRawGYRO</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvtGetSensorRawGYRO &rArr; CheckSecurityID
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRaw9D
</UL>

<P><STRONG><a name="[71]"></a>nvtGetSensorRawMAG</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvtGetSensorRawMAG &rArr; CheckSecurityID
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRaw9D
</UL>

<P><STRONG><a name="[16f]"></a>nvtGetSensorRawBARO</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvtGetSensorRawBARO &rArr; CheckSecurityID
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
</UL>

<P><STRONG><a name="[383]"></a>nvtSmoothSensorRawData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ahrslib.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>nvtGetSensorRaw9D</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ahrslib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawMAG
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawGYRO
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawACC
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>

<P><STRONG><a name="[af]"></a>nvtGetAccOffset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[b0]"></a>nvtGetAccScale</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[aa]"></a>nvtGetGyroOffset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[ab]"></a>nvtGetGyroScale</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[b1]"></a>nvtGetMagCalMatrix</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
</UL>

<P><STRONG><a name="[384]"></a>nvtSetSensorEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ahrslib.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>nvtSetAccOffset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
</UL>

<P><STRONG><a name="[18f]"></a>nvtSetAccScale</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
</UL>

<P><STRONG><a name="[194]"></a>nvtSetGyroOffset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
</UL>

<P><STRONG><a name="[193]"></a>nvtSetGyroScale</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ahrslib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
</UL>

<P><STRONG><a name="[196]"></a>nvtSetMagCalMatrix</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ahrslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nvtSetMagCalMatrix &rArr; SetMagGuass &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMagMasterTime
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
</UL>

<P><STRONG><a name="[15f]"></a>nvtGyroCenterCalibrate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gyrocalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroDynamicCenter
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZWithoutG_Base
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;armDetect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalGyroInit
</UL>

<P><STRONG><a name="[6a]"></a>nvtCalGyroInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gyrocalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = nvtCalGyroInit &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
</UL>

<P><STRONG><a name="[27a]"></a>nvtGyroIsSteady</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gyrocalibrate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[27b]"></a>GyroScaleCalibrate</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, gyrocalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroScaleCalibrate
</UL>

<P><STRONG><a name="[6b]"></a>nvtGyroScaleCalibrate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gyrocalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = nvtGyroScaleCalibrate &rArr; GyroScaleCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroScaleCalibrate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRead
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibration
</UL>

<P><STRONG><a name="[26e]"></a>SetCalibrateGYRO</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gyrocalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
</UL>

<P><STRONG><a name="[172]"></a>nvtGetCalibratedGYRO</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gyrocalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
</UL>

<P><STRONG><a name="[195]"></a>nvtSetGYRODegPLSB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyrocalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
</UL>

<P><STRONG><a name="[6f]"></a>nvtCalMAGInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, magcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
</UL>

<P><STRONG><a name="[27c]"></a>UpdateCalibrateInfoMAG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, magcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateCalibrateInfoMAG
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalibrateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalMAGBufferFill
</UL>

<P><STRONG><a name="[270]"></a>SetCalibrateMAG</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, magcalibrate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawMAG
</UL>

<P><STRONG><a name="[173]"></a>nvtGetCalibratedMAG</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, magcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
</UL>

<P><STRONG><a name="[70]"></a>nvtCalMAGBufferFill</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, magcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = nvtCalMAGBufferFill &rArr; MagCalibrate &rArr; calibrate_model_mag &rArr; compute_eigenvalue &rArr; Jacobi_Cyclic_Method &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibrate
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCalibrateInfoMAG
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
</UL>

<P><STRONG><a name="[197]"></a>nvtSetMagGaussPLSB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, magcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
</UL>

<P><STRONG><a name="[73]"></a>nvtGetMagCalQFactor</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, magcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
</UL>

<P><STRONG><a name="[276]"></a>SetMagGuass</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, magcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetMagGuass &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetMagCalMatrix
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[385]"></a>GetMagGuass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, magcalibrate.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>AccFilterInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, accfilter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AccFilterInit &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAHRSPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[280]"></a>iirLPFilterSingle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, accfilter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuAccIIRLPFilter
</UL>

<P><STRONG><a name="[27f]"></a>imuAccIIRLPFilter</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, accfilter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iirLPFilterSingle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAHRSPeriod
</UL>

<P><STRONG><a name="[281]"></a>FilterCalibrateACC</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, accfilter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[26a]"></a>MultiwiiAccFilter</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, accfilter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MultiwiiAccFilter &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterCalibrateACC
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
</UL>

<P><STRONG><a name="[283]"></a>reset_calibration_matrices</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_calibration_matrices_mag
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_calibration_matrices_acc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_mag_beta
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_acc_beta
</UL>

<P><STRONG><a name="[282]"></a>setup_acc_beta</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_acc_beta &rArr; reset_calibration_matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrate
</UL>

<P><STRONG><a name="[284]"></a>setup_mag_beta</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_mag_beta &rArr; reset_calibration_matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibrate
</UL>

<P><STRONG><a name="[286]"></a>update_calibration_matrices</STRONG> (Thumb, 182 bytes, Stack size 44 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = update_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_calibration_matrices_acc
</UL>

<P><STRONG><a name="[288]"></a>update_calibration_matrices_mag</STRONG> (Thumb, 476 bytes, Stack size 160 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = update_calibration_matrices_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_calibration_matrices_mag
</UL>

<P><STRONG><a name="[285]"></a>compute_calibration_matrices_acc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = compute_calibration_matrices_acc &rArr; update_calibration_matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>

<P><STRONG><a name="[287]"></a>compute_calibration_matrices_mag</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = compute_calibration_matrices_mag &rArr; update_calibration_matrices_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices_mag
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
</UL>

<P><STRONG><a name="[386]"></a>Det</STRONG> (Thumb, 146 bytes, Stack size 52 bytes, gauss_newton_calibrate.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>Jacobi_Cyclic_Method</STRONG> (Thumb, 782 bytes, Stack size 104 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Jacobi_Cyclic_Method &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_eigenvalue
</UL>

<P><STRONG><a name="[28a]"></a>compute_eigenvalue</STRONG> (Thumb, 620 bytes, Stack size 200 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = compute_eigenvalue &rArr; Jacobi_Cyclic_Method &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacobi_Cyclic_Method
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
</UL>

<P><STRONG><a name="[28c]"></a>find_delta</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = find_delta
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>

<P><STRONG><a name="[28d]"></a>VerifyBetaAcc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>

<P><STRONG><a name="[387]"></a>VerifyBetaMagCircle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gauss_newton_calibrate.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>VerifyBetaMag</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VerifyBetaMag
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
</UL>

<P><STRONG><a name="[28f]"></a>VerifyBetaMagAvg</STRONG> (Thumb, 256 bytes, Stack size 112 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VerifyBetaMagAvg
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
</UL>

<P><STRONG><a name="[28b]"></a>calibrate_model_acc</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = calibrate_model_acc &rArr; compute_calibration_matrices_acc &rArr; update_calibration_matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyBetaAcc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_delta
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_calibration_matrices_acc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrate
</UL>

<P><STRONG><a name="[28e]"></a>calibrate_model_mag</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = calibrate_model_mag &rArr; compute_eigenvalue &rArr; Jacobi_Cyclic_Method &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyBetaMagAvg
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyBetaMag
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_delta
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_eigenvalue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_calibration_matrices_mag
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibrate
</UL>

<P><STRONG><a name="[291]"></a>EllipsoidInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibrate
</UL>

<P><STRONG><a name="[292]"></a>UpdateEllipsoidRange</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateEllipsoidRange
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibrate
</UL>

<P><STRONG><a name="[293]"></a>PreCaculateEllipsoidCenter</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibrate
</UL>

<P><STRONG><a name="[27d]"></a>MagCalibrate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = MagCalibrate &rArr; calibrate_model_mag &rArr; compute_eigenvalue &rArr; Jacobi_Cyclic_Method &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCaculateEllipsoidCenter
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEllipsoidRange
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EllipsoidInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_mag
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_mag_beta
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalMAGBufferFill
</UL>

<P><STRONG><a name="[248]"></a>AccCalibrate</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AccCalibrate &rArr; calibrate_model_acc &rArr; compute_calibration_matrices_acc &rArr; update_calibration_matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_acc_beta
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[245]"></a>GetCalibrateParams</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCalibrateInfoMAG
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCalibrateInfoACC
</UL>

<P><STRONG><a name="[249]"></a>AccZCalibrate</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, gauss_newton_calibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AccZCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[388]"></a>shiftBufferR</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>pushBuffer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[299]"></a>CheckMean</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[294]"></a>CheckStandardDV</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CheckStandardDV &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[389]"></a>CheckMedian</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>CheckMode</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CheckMode
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[29b]"></a>CheckEmpirical</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckEmpirical
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[38a]"></a>comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
</UL>

<P><STRONG><a name="[295]"></a>partition</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = partition
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSortIterative
</UL>

<P><STRONG><a name="[297]"></a>quickSortIterative</STRONG> (Thumb, 104 bytes, Stack size 536 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[278]"></a>GetGyroDynamicCenter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[29d]"></a>CheckNormalDistribution</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckNormalDistribution
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[298]"></a>CheckGyroNormalParam</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSortIterative
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMean
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[277]"></a>GyroDynamicCalibrate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gyrodriftcalibrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative &rArr; partition
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNormalDistribution
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroScaleCalibrate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroIsSteady
</UL>

<P><STRONG><a name="[29e]"></a>GyroDynamicGetDrift</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[38b]"></a>GyroDynamicGetSteady</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>GyroDynamicInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gyrodriftcalibrate.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>FMCReadPID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, security.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[29f]"></a>FMCReadUID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMCReadUID
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[2a0]"></a>FMCReadUCID</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMCReadUCID
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[24b]"></a>CheckSecurityID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawMAG
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvt100usecondTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawGYRO
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawBARO
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRawACC
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetSensorRaw9D
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRaw9D
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawBARO
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawMAG
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtMillisecondTick
</UL>

<P><STRONG><a name="[24a]"></a>SetupSecurityID</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetupSecurityID &rArr; FMCReadUCID
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMCReadUCID
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMCReadUID
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMCReadPID
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[275]"></a>UpdateMagMasterTime</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sensorfusion6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateMagMasterTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTickCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetMagCalMatrix
</UL>

<P><STRONG><a name="[2a3]"></a>ComputeEuler</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, sensorfusion6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ComputeEuler &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
</UL>

<P><STRONG><a name="[38d]"></a>filterA</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>CheckAccSteady</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
</UL>

<P><STRONG><a name="[2a5]"></a>ComputeMotion</STRONG> (Thumb, 482 bytes, Stack size 12 bytes, sensorfusion6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ComputeMotion
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAccSteady
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
</UL>

<P><STRONG><a name="[2a7]"></a>sensfusion6UpdateQ</STRONG> (Thumb, 746 bytes, Stack size 48 bytes, sensorfusion6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sensfusion6UpdateQ &rArr; ComputeEuler &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[2a9]"></a>checkMagFail</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[265]"></a>sensfusion9UpdateQ</STRONG> (Thumb, 1096 bytes, Stack size 80 bytes, sensorfusion6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sensfusion9UpdateQ &rArr; sensfusion6UpdateQ &rArr; ComputeEuler &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTickCounter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
</UL>

<P><STRONG><a name="[251]"></a>sensfusion6GetEulerRPY</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerRPY
</UL>

<P><STRONG><a name="[273]"></a>sensfusion6GetAccZWithoutGravity</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
</UL>

<P><STRONG><a name="[254]"></a>sensfusion6GetGyro</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetNormAttitude
</UL>

<P><STRONG><a name="[256]"></a>sensfusion6GetAcc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetNormACC
</UL>

<P><STRONG><a name="[252]"></a>sensfusion6Getquaternion</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetQuaternion
</UL>

<P><STRONG><a name="[268]"></a>sensfusion6UpdateMagByEuler</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, sensorfusion6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sensfusion6UpdateMagByEuler &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
</UL>

<P><STRONG><a name="[2ab]"></a>caculate_mag_degree</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetMagDegree
</UL>

<P><STRONG><a name="[25a]"></a>sensfusion6GetMagEuler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerNormMAG
</UL>

<P><STRONG><a name="[25c]"></a>sensfusion6GetNormMag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetNormMAG
</UL>

<P><STRONG><a name="[258]"></a>sensfusion6GetMagDegree</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_mag_degree
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetMAGHeading
</UL>

<P><STRONG><a name="[25e]"></a>sensfusion6GetGyroDeg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetGYRODegree
</UL>

<P><STRONG><a name="[25f]"></a>sensfusion6GetVelocity</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetVelocity
</UL>

<P><STRONG><a name="[260]"></a>sensfusion6GetMove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetMove
</UL>

<P><STRONG><a name="[262]"></a>sensfusion6SetMove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetMove
</UL>

<P><STRONG><a name="[264]"></a>sensfusion6ResetMove</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sensorfusion6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtResetMove
</UL>

<P><STRONG><a name="[38e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicGetDrift
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDValue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnit32
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibration
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuAccIIRLPFilter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuAccIIRLPFilter
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_missed_wp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuAccIIRLPFilter
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadband
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_althold_pid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_quaternion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_euler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_eigenvalue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacobi_Cyclic_Method
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuAccIIRLPFilter
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroScaleCalibrate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_mag_degree
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
</UL>

<P><STRONG><a name="[390]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadband
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_missed_wp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDfloat
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_eigenvalue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacobi_Cyclic_Method
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_mag_degree
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[391]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[392]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[393]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[394]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[2ad]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[395]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[396]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[2b0]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[2bb]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[2bc]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[397]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[49]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2b7]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2c0]"></a>_scanf_really_real</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[47]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2ba]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2c2]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2c3]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[398]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[72]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_I2C_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashControl
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controllerInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashCal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitMAG
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagCalibration
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDa_NEC_Rx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPS
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_UBLOX_newFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_address_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSV7241_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitGYRO
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitACC
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_flash_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_mode_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rc_status
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_actuator_status
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_speed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_velocity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_althold_pid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_rate_pid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_pid
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_motor_power
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_calibrated
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_sensor_raw
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_quaternion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ahrs_euler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_SSV_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Callback_Tx_Continue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Callback_Tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Callback_Rx_Continue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Callback_Rx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroScaleCalibrate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[399]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[39a]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2c5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[39b]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2a4]"></a>__hardfp_atan</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
</UL>

<P><STRONG><a name="[1fe]"></a>__hardfp_atan2</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_mag_degree
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
</UL>

<P><STRONG><a name="[96]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPIDfloat
</UL>

<P><STRONG><a name="[1a0]"></a>__hardfp_cos</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
</UL>

<P><STRONG><a name="[1a3]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_missed_wp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadband
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
</UL>

<P><STRONG><a name="[1a1]"></a>__hardfp_sin</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commanderGetRPY
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
</UL>

<P><STRONG><a name="[1fc]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_eigenvalue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jacobi_Cyclic_Method
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[2cc]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 972 bytes, Stack size 168 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2ce]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2c8]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2cd]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2c6]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2ca]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[39c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[39d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[39e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2cb]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[2c1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2c9]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2c7]"></a>fabs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, system_m451series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[10]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m451series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m451series.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SYS_UnlockReg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flashctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
</UL>

<P><STRONG><a name="[9d]"></a>FMC_Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flashctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
</UL>

<P><STRONG><a name="[9e]"></a>FMC_Erase</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, flashctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[a2]"></a>SetDataFlashBase</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, flashctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetDataFlashBase &rArr; FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EnableConfigUpdate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[a0]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flashctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBoardVersion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_FLASH_Write
</UL>

<P><STRONG><a name="[c2]"></a>SYS_UnlockReg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, abrobot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandProcess
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[111]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannelf
</UL>

<P><STRONG><a name="[14c]"></a>SYS_UnlockReg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nvt_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_WriteByteContinue_addr8
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVT_ReadByteContinue_addr8
</UL>

<P><STRONG><a name="[1a6]"></a>distributePower</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, stabilizer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = distributePower &rArr; motorsSetRatio
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorCal
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorsSetRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilizer
</UL>

<P><STRONG><a name="[1ae]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[1b5]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[1b6]"></a>TIMER_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[1b3]"></a>TIMER_EnableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
</UL>

<P><STRONG><a name="[1e9]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
</UL>

<P><STRONG><a name="[1f8]"></a>check_missed_wp</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_18000
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[201]"></a>GPS_calc_velocity</STRONG> (Thumb, 176 bytes, Stack size 4 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadFilterY_get_position
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeadFilterX_get_position
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[210]"></a>GPS_calc_location_error</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[204]"></a>GPS_calc_poshold</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_D
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_I
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_P
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[207]"></a>GPS_update_crosstrack</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_36000
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_18000
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
</UL>

<P><STRONG><a name="[20a]"></a>GPS_calc_nav_rate</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_D
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_I
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_P
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[211]"></a>GPS_calc_desired_speed</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[223]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigCaptureChannel
</UL>

<P><STRONG><a name="[228]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
</UL>

<P><STRONG><a name="[227]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[226]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>

<P><STRONG><a name="[232]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[233]"></a>FMC_Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>

<P><STRONG><a name="[234]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
</UL>

<P><STRONG><a name="[237]"></a>I2S_GetSourceClockFreq</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableMCLK
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Open
</UL>

<P><STRONG><a name="[4c]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[23b]"></a>RTC_WaitAccessEnable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTickPeriod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_32KCalibration
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableSnooperDetection
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSnooperDetection
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DisableSpareRegister
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableSpareAccess
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmTime
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmDate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmDateAndTime
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarmDateAndTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDateAndTime
</UL>

<P><STRONG><a name="[2a8]"></a>invSqrt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sensorfusion6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
</UL>

<P><STRONG><a name="[2cf]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c4]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[2d1]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d0]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b6]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[2be]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

#line 1 "ssv7241.c"






 














 
#line 1 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdio.h"
 
 
 





 






 













#line 38 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdio.h"


  
  typedef unsigned int size_t;    








 
 

 
  typedef struct __va_list __va_list;





   




 




typedef struct __fpos_t_struct {
    unsigned __int64 __pos;
    



 
    struct {
        unsigned int __state1, __state2;
    } __mbstate;
} fpos_t;
   


 


   

 

typedef struct __FILE FILE;
   






 

extern FILE __stdin, __stdout, __stderr;
extern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;

#line 129 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdio.h"
    

    

    





     



   


 


   


 

   



 

   


 




   


 





    


 






extern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   








 
extern __declspec(__nothrow) FILE *tmpfile(void);
   




 
extern __declspec(__nothrow) char *tmpnam(char *  );
   











 

extern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
   







 
extern __declspec(__nothrow) int fflush(FILE *  );
   







 
extern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
                           const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   








































 
extern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
                    const char * __restrict  ,
                    FILE * __restrict  ) __attribute__((__nonnull__(2,3)));
   








 
extern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
                    char * __restrict  ) __attribute__((__nonnull__(1)));
   




 
extern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
                   char * __restrict  ,
                   int  , size_t  ) __attribute__((__nonnull__(1)));
   















 
#pragma __printf_args
extern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   


















 
#pragma __printf_args
extern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 
#pragma __printf_args
extern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   




 
#pragma __printf_args
extern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   



 
#pragma __printf_args
extern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   






 
#pragma __printf_args
extern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 

#pragma __printf_args
extern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(3)));
   















 

#pragma __printf_args
extern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
                      const char * __restrict  , ...) __attribute__((__nonnull__(3)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   






























 
#pragma __scanf_args
extern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   






 
#pragma __scanf_args
extern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int sscanf(const char * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   








 
#pragma __scanf_args
extern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 

 
extern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));

extern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));

extern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
                    const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int vsprintf(char * __restrict  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   






 

extern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));
   







 

extern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
                      const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   



 
extern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   



 
extern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
                      const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));
   



 
extern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
   







 
extern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
                    FILE * __restrict  ) __attribute__((__nonnull__(1,3)));
   










 
extern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   







 
extern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
   







 




    extern __declspec(__nothrow) int (getchar)(void);

   





 
extern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
   









 
extern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   





 




    extern __declspec(__nothrow) int (putchar)(int  );

   



 
extern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   






















 

extern __declspec(__nothrow) size_t fread(void * __restrict  ,
                    size_t  , size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,4)));
   











 

extern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
                    size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,3)));
   











 

extern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
                    size_t  , size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,4)));
   







 

extern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
   








 
extern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
   














 
extern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
   










 
extern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
   











 
extern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
   





 

extern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
   




 

extern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
   


 
extern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
   


 
extern __declspec(__nothrow) void perror(const char *  );
   









 

extern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
    
 

extern __declspec(__nothrow) void __use_no_semihosting_swi(void);
extern __declspec(__nothrow) void __use_no_semihosting(void);
    





 











#line 948 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdio.h"



 

#line 24 "ssv7241.c"
#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"









 



















 







 















 


 
 
 



 





 

typedef enum IRQn
{
     
    NonMaskableInt_IRQn           = -14,       
    MemoryManagement_IRQn         = -12,       
    BusFault_IRQn                 = -11,       
    UsageFault_IRQn               = -10,       
    SVCall_IRQn                   = -5,        
    DebugMonitor_IRQn             = -4,        
    PendSV_IRQn                   = -2,        
    SysTick_IRQn                  = -1,        

     

    BOD_IRQn                      = 0,         
    IRC_IRQn                      = 1,         
    PWRWU_IRQn                    = 2,         
    RAMPE_IRQn                    = 3,         
    CKFAIL_IRQn                   = 4,         
    RTC_IRQn                      = 6,         
    TAMPER_IRQn                   = 7,         
    WDT_IRQn                      = 8,         
    WWDT_IRQn                     = 9,         
    EINT0_IRQn                    = 10,        
    EINT1_IRQn                    = 11,        
    EINT2_IRQn                    = 12,        
    EINT3_IRQn                    = 13,        
    EINT4_IRQn                    = 14,        
    EINT5_IRQn                    = 15,        
    GPA_IRQn                      = 16,        
    GPB_IRQn                      = 17,        
    GPC_IRQn                      = 18,        
    GPD_IRQn                      = 19,        
    GPE_IRQn                      = 20,        
    GPF_IRQn                      = 21,        
    SPI0_IRQn                     = 22,        
    SPI1_IRQn                     = 23,        
    BRAKE0_IRQn                   = 24,        
    PWM0P0_IRQn                   = 25,        
    PWM0P1_IRQn                   = 26,        
    PWM0P2_IRQn                   = 27,        
    BRAKE1_IRQn                   = 28,        
    PWM1P0_IRQn                   = 29,        
    PWM1P1_IRQn                   = 30,        
    PWM1P2_IRQn                   = 31,        
    TMR0_IRQn                     = 32,        
    TMR1_IRQn                     = 33,        
    TMR2_IRQn                     = 34,        
    TMR3_IRQn                     = 35,        
    UART0_IRQn                    = 36,        
    UART1_IRQn                    = 37,        
    I2C0_IRQn                     = 38,        
    I2C1_IRQn                     = 39,        
    PDMA_IRQn                     = 40,        
    DAC_IRQn                      = 41,        
    ADC00_IRQn                    = 42,        
    ADC01_IRQn                    = 43,        
    ACMP01_IRQn                   = 44,        
    ADC02_IRQn                    = 46,        
    ADC03_IRQn                    = 47,        
    UART2_IRQn                    = 48,        
    UART3_IRQn                    = 49,        
    SPI2_IRQn                     = 51,        
    USBD_IRQn                     = 53,        
    USBH_IRQn                     = 54,        
    USBOTG_IRQn                   = 55,        
    CAN0_IRQn                     = 56,        
    SC0_IRQn                      = 58,        
    TK_IRQn                       = 63         
} IRQn_Type;






 

 






   

#line 1 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"
 




















 






















 




 


 

 













#line 89 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"


 
#line 103 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"

#line 152 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"

#line 1 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdint.h"
 
 





 










#line 26 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdint.h"







 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     
typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;

     
typedef   signed       __int64 intmax_t;
typedef unsigned       __int64 uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     


     


     


     

     


     


     


     

     



     



     


     
    
 



#line 197 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdint.h"

     







     










     











#line 261 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdint.h"



 



#line 154 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"
#line 1 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
 




















 





 



 


 









 







 







 






 








 







 







 









 









 

__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
{
  rev16 r0, r0
  bx lr
}








 

__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}










 











 









 









 









 











 











 











 







 










 










 









 






#line 618 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"

   

#line 155 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"
#line 1 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmFunc.h"
 




















 





 



 


 





 
 






 
static __inline uint32_t __get_CONTROL(void)
{
  register uint32_t __regControl         __asm("control");
  return(__regControl);
}







 
static __inline void __set_CONTROL(uint32_t control)
{
  register uint32_t __regControl         __asm("control");
  __regControl = control;
}







 
static __inline uint32_t __get_IPSR(void)
{
  register uint32_t __regIPSR          __asm("ipsr");
  return(__regIPSR);
}







 
static __inline uint32_t __get_APSR(void)
{
  register uint32_t __regAPSR          __asm("apsr");
  return(__regAPSR);
}







 
static __inline uint32_t __get_xPSR(void)
{
  register uint32_t __regXPSR          __asm("xpsr");
  return(__regXPSR);
}







 
static __inline uint32_t __get_PSP(void)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}







 
static __inline void __set_PSP(uint32_t topOfProcStack)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}







 
static __inline uint32_t __get_MSP(void)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}







 
static __inline void __set_MSP(uint32_t topOfMainStack)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}







 
static __inline uint32_t __get_PRIMASK(void)
{
  register uint32_t __regPriMask         __asm("primask");
  return(__regPriMask);
}







 
static __inline void __set_PRIMASK(uint32_t priMask)
{
  register uint32_t __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}








 







 








 
static __inline uint32_t  __get_BASEPRI(void)
{
  register uint32_t __regBasePri         __asm("basepri");
  return(__regBasePri);
}







 
static __inline void __set_BASEPRI(uint32_t basePri)
{
  register uint32_t __regBasePri         __asm("basepri");
  __regBasePri = (basePri & 0xff);
}







 
static __inline uint32_t __get_FAULTMASK(void)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  return(__regFaultMask);
}







 
static __inline void __set_FAULTMASK(uint32_t faultMask)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  __regFaultMask = (faultMask & (uint32_t)1);
}











 
static __inline uint32_t __get_FPSCR(void)
{

  register uint32_t __regfpscr         __asm("fpscr");
  return(__regfpscr);



}







 
static __inline void __set_FPSCR(uint32_t fpscr)
{

  register uint32_t __regfpscr         __asm("fpscr");
  __regfpscr = (fpscr);

}




#line 612 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmFunc.h"

 


#line 156 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"
#line 1 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4_simd.h"
 




















 











 


 



 


 

 
#line 106 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4_simd.h"








 



#line 641 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4_simd.h"

 




#line 157 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"








 
#line 192 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"

 






 
#line 208 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"

 













 


 





 


 
typedef union
{
  struct
  {



    uint32_t _reserved0:16;               
    uint32_t GE:4;                        
    uint32_t _reserved1:7;                

    uint32_t Q:1;                         
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} APSR_Type;



 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:23;               
  } b;                                    
  uint32_t w;                             
} IPSR_Type;



 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       



    uint32_t _reserved0:7;                
    uint32_t GE:4;                        
    uint32_t _reserved1:4;                

    uint32_t T:1;                         
    uint32_t IT:2;                        
    uint32_t Q:1;                         
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} xPSR_Type;



 
typedef union
{
  struct
  {
    uint32_t nPRIV:1;                     
    uint32_t SPSEL:1;                     
    uint32_t FPCA:1;                      
    uint32_t _reserved0:29;               
  } b;                                    
  uint32_t w;                             
} CONTROL_Type;

 






 


 
typedef struct
{
  volatile uint32_t ISER[8];                  
       uint32_t RESERVED0[24];
  volatile uint32_t ICER[8];                  
       uint32_t RSERVED1[24];
  volatile uint32_t ISPR[8];                  
       uint32_t RESERVED2[24];
  volatile uint32_t ICPR[8];                  
       uint32_t RESERVED3[24];
  volatile uint32_t IABR[8];                  
       uint32_t RESERVED4[56];
  volatile uint8_t  IP[240];                  
       uint32_t RESERVED5[644];
  volatile  uint32_t STIR;                     
}  NVIC_Type;

 



 






 


 
typedef struct
{
  volatile const  uint32_t CPUID;                    
  volatile uint32_t ICSR;                     
  volatile uint32_t VTOR;                     
  volatile uint32_t AIRCR;                    
  volatile uint32_t SCR;                      
  volatile uint32_t CCR;                      
  volatile uint8_t  SHP[12];                  
  volatile uint32_t SHCSR;                    
  volatile uint32_t CFSR;                     
  volatile uint32_t HFSR;                     
  volatile uint32_t DFSR;                     
  volatile uint32_t MMFAR;                    
  volatile uint32_t BFAR;                     
  volatile uint32_t AFSR;                     
  volatile const  uint32_t PFR[2];                   
  volatile const  uint32_t DFR;                      
  volatile const  uint32_t ADR;                      
  volatile const  uint32_t MMFR[4];                  
  volatile const  uint32_t ISAR[5];                  
       uint32_t RESERVED0[5];
  volatile uint32_t CPACR;                    
} SCB_Type;

 















 






























 



 





















 









 


















 










































 









 









 















 






 


 
typedef struct
{
       uint32_t RESERVED0[1];
  volatile const  uint32_t ICTR;                     
  volatile uint32_t ACTLR;                    
} SCnSCB_Type;

 



 















 






 


 
typedef struct
{
  volatile uint32_t CTRL;                     
  volatile uint32_t LOAD;                     
  volatile uint32_t VAL;                      
  volatile const  uint32_t CALIB;                    
} SysTick_Type;

 












 



 



 









 






 


 
typedef struct
{
  volatile  union
  {
    volatile  uint8_t    u8;                   
    volatile  uint16_t   u16;                  
    volatile  uint32_t   u32;                  
  }  PORT [32];                           
       uint32_t RESERVED0[864];
  volatile uint32_t TER;                      
       uint32_t RESERVED1[15];
  volatile uint32_t TPR;                      
       uint32_t RESERVED2[15];
  volatile uint32_t TCR;                      
       uint32_t RESERVED3[29];
  volatile  uint32_t IWR;                      
  volatile const  uint32_t IRR;                      
  volatile uint32_t IMCR;                     
       uint32_t RESERVED4[43];
  volatile  uint32_t LAR;                      
  volatile const  uint32_t LSR;                      
       uint32_t RESERVED5[6];
  volatile const  uint32_t PID4;                     
  volatile const  uint32_t PID5;                     
  volatile const  uint32_t PID6;                     
  volatile const  uint32_t PID7;                     
  volatile const  uint32_t PID0;                     
  volatile const  uint32_t PID1;                     
  volatile const  uint32_t PID2;                     
  volatile const  uint32_t PID3;                     
  volatile const  uint32_t CID0;                     
  volatile const  uint32_t CID1;                     
  volatile const  uint32_t CID2;                     
  volatile const  uint32_t CID3;                     
} ITM_Type;

 



 



























 



 



 



 









   






 


 
typedef struct
{
  volatile uint32_t CTRL;                     
  volatile uint32_t CYCCNT;                   
  volatile uint32_t CPICNT;                   
  volatile uint32_t EXCCNT;                   
  volatile uint32_t SLEEPCNT;                 
  volatile uint32_t LSUCNT;                   
  volatile uint32_t FOLDCNT;                  
  volatile const  uint32_t PCSR;                     
  volatile uint32_t COMP0;                    
  volatile uint32_t MASK0;                    
  volatile uint32_t FUNCTION0;                
       uint32_t RESERVED0[1];
  volatile uint32_t COMP1;                    
  volatile uint32_t MASK1;                    
  volatile uint32_t FUNCTION1;                
       uint32_t RESERVED1[1];
  volatile uint32_t COMP2;                    
  volatile uint32_t MASK2;                    
  volatile uint32_t FUNCTION2;                
       uint32_t RESERVED2[1];
  volatile uint32_t COMP3;                    
  volatile uint32_t MASK3;                    
  volatile uint32_t FUNCTION3;                
} DWT_Type;

 






















































 



 



 



 



 



 



 



























   






 


 
typedef struct
{
  volatile uint32_t SSPSR;                    
  volatile uint32_t CSPSR;                    
       uint32_t RESERVED0[2];
  volatile uint32_t ACPR;                     
       uint32_t RESERVED1[55];
  volatile uint32_t SPPR;                     
       uint32_t RESERVED2[131];
  volatile const  uint32_t FFSR;                     
  volatile uint32_t FFCR;                     
  volatile const  uint32_t FSCR;                     
       uint32_t RESERVED3[759];
  volatile const  uint32_t TRIGGER;                  
  volatile const  uint32_t FIFO0;                    
  volatile const  uint32_t ITATBCTR2;                
       uint32_t RESERVED4[1];
  volatile const  uint32_t ITATBCTR0;                
  volatile const  uint32_t FIFO1;                    
  volatile uint32_t ITCTRL;                   
       uint32_t RESERVED5[39];
  volatile uint32_t CLAIMSET;                 
  volatile uint32_t CLAIMCLR;                 
       uint32_t RESERVED7[8];
  volatile const  uint32_t DEVID;                    
  volatile const  uint32_t DEVTYPE;                  
} TPI_Type;

 



 



 












 






 



 





















 



 





















 



 



 


















 






   







 


 
typedef struct
{
  volatile const  uint32_t TYPE;                     
  volatile uint32_t CTRL;                     
  volatile uint32_t RNR;                      
  volatile uint32_t RBAR;                     
  volatile uint32_t RASR;                     
  volatile uint32_t RBAR_A1;                  
  volatile uint32_t RASR_A1;                  
  volatile uint32_t RBAR_A2;                  
  volatile uint32_t RASR_A2;                  
  volatile uint32_t RBAR_A3;                  
  volatile uint32_t RASR_A3;                  
} MPU_Type;

 









 









 



 









 






























 








 


 
typedef struct
{
       uint32_t RESERVED0[1];
  volatile uint32_t FPCCR;                    
  volatile uint32_t FPCAR;                    
  volatile uint32_t FPDSCR;                   
  volatile const  uint32_t MVFR0;                    
  volatile const  uint32_t MVFR1;                    
} FPU_Type;

 



























 



 












 
























 












 







 


 
typedef struct
{
  volatile uint32_t DHCSR;                    
  volatile  uint32_t DCRSR;                    
  volatile uint32_t DCRDR;                    
  volatile uint32_t DEMCR;                    
} CoreDebug_Type;

 




































 






 







































 






 

 
#line 1366 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"

#line 1375 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cm4.h"











 










 

 



 




 










 
static __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);                

  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
  reg_value &= ~((0xFFFFUL << 16) | (7UL << 8));              
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << 16) |
                (PriorityGroupTmp << 8));                                      
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
}







 
static __inline uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) >> 8);    
}







 
static __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));  
}







 
static __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}











 
static __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
}







 
static __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}







 
static __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}










 
static __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
}










 
static __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }  
  else {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)] = ((priority << (8 - 4)) & 0xff);    }         
}












 
static __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if(IRQn < 0) {
    return((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 4)));  }  
  else {
    return((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)]           >> (8 - 4)));  }  
}













 
static __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);           
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}













 
static __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);           
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
}





 
static __inline void NVIC_SystemReset(void)
{
  __dsb(0xF);                                                     
 
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FA << 16)      |
                 (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) |
                 (1UL << 2));                    
  __dsb(0xF);                                                      
  while(1);                                                     
}

 



 




 

















 
static __inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > (0xFFFFFFUL << 0))  return (1);       

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = ticks - 1;                                   
  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);   
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0;                                           
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2) |
                   (1UL << 1)   |
                   (1UL << 0);                     
  return (0);                                                   
}



 



 




 

extern volatile int32_t ITM_RxBuffer;                     












 
static __inline uint32_t ITM_SendChar (uint32_t ch)
{
  if ((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL << 0))                  &&       
      (((ITM_Type *) (0xE0000000UL) )->TER & (1UL << 0)        )                    )      
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0].u32 == 0);
    ((ITM_Type *) (0xE0000000UL) )->PORT[0].u8 = (uint8_t) ch;
  }
  return (ch);
}








 
static __inline int32_t ITM_ReceiveChar (void) {
  int32_t ch = -1;                            

  if (ITM_RxBuffer != 0x5AA55AA5) {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5;        
  }

  return (ch);
}








 
static __inline int32_t ITM_CheckChar (void) {

  if (ITM_RxBuffer == 0x5AA55AA5) {
    return (0);                                  
  } else {
    return (1);                                  
  }
}

 





#line 159 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"









 








#line 20 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"

 
 
 







 

#line 39 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"




extern uint32_t SystemCoreClock;      
extern uint32_t CyclesPerUs;          
extern uint32_t PllClock;             










 
extern void SystemInit(void);









 
extern void SystemCoreClockUpdate(void);






 
#line 160 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 161 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"



 
 
 





 


 



 

typedef struct
{
    


















































 
    


















































 
    volatile uint32_t CTL[2];                 

    


































 
    volatile uint32_t STATUS;                 

    












 
    volatile uint32_t VREF;                   

} ACMP_T;




 























































   
   


 



 

typedef struct
{
    



















 
    volatile const  uint32_t DAT[19];
    









 
    volatile const  uint32_t CURDAT;
    
























































 
    volatile uint32_t CTL;
    












 
    volatile  uint32_t SWTRG;
    













 
    volatile uint32_t PENDSTS;
    










 
    volatile uint32_t OVSTS;
    uint32_t RESERVE0[7];
    











 
    volatile uint32_t SELFTCTL;
    




































































 
    

































































 
    









 
    volatile uint32_t SCTL[19];
    uint32_t RESERVE1[1];
    































































 
    volatile uint32_t INTSRC[4];
    




















































 
    volatile uint32_t CMP[4];
    










 
    volatile const  uint32_t STATUS0;
    










 
    volatile const  uint32_t STATUS1;
    




































































































































 
    volatile uint32_t STATUS2;
    










 
    volatile const  uint32_t STATUS3;
    




















 
    volatile const  uint32_t DDAT[4];

} EADC_T;




 




































































































































































































   
   


 



 

typedef struct
{

    















 
    volatile uint32_t CREQ;
    



























































 
    volatile uint32_t CMASK;
    









 
    volatile uint32_t MASK1;
    

















 
    volatile uint32_t MASK2;
    









 
    volatile uint32_t ARB1;
    
























 
    volatile uint32_t ARB2;
    





















































 
    volatile uint32_t MCON;
    










 
    volatile uint32_t DAT_A1;
    










 
    volatile uint32_t DAT_A2;
    










 
    volatile uint32_t DAT_B1;
    










 
    volatile uint32_t DAT_B2;
    volatile const uint32_t RESERVE0[13];

} CAN_IF_T;

typedef struct
{

    



























 
    volatile uint32_t CON;
    




























 
    volatile uint32_t STATUS;
    













 
    volatile const  uint32_t ERR;
    




















 
    volatile uint32_t BTIME;
    















 
    volatile const  uint32_t IIDR;
    


























 
    volatile uint32_t TEST;
    









 
    volatile uint32_t BRPE;
    uint32_t RESERVE0[1];

    volatile CAN_IF_T   IF[2];
    volatile const uint32_t    RESERVE1[8];
    










 
    volatile const  uint32_t TXREQ1;
    










 
    volatile const  uint32_t TXREQ2;
    uint32_t RESERVE3[6];
    









 
    volatile const  uint32_t NDAT1;
    









 
    volatile const  uint32_t NDAT2;
    uint32_t RESERVE4[6];
    









 
    volatile const  uint32_t IPND1;
    









 
    volatile const  uint32_t IPND2;
    uint32_t RESERVE5[6];
    












 
    volatile const  uint32_t MVLD1;
    











 
    volatile const  uint32_t MVLD2;
    










 
    volatile uint32_t WU_EN;
    










 
    volatile uint32_t WU_STATUS;

} CAN_T;




 
 





















 


















 









 












 



 















 



 






 
























 



 









 



 












 






























 






 






 






 






 



 



 



 



 



 



 



 



 



 




   
   


 



 

typedef struct
{


    








































































 
    volatile uint32_t PWRCTL;

    
























 
    volatile uint32_t AHBCLK;

    









































































 
    volatile uint32_t APBCLK0;

    





















 
    volatile uint32_t APBCLK1;

    



































 
    volatile uint32_t CLKSEL0;

    
























































 
    volatile uint32_t CLKSEL1;

    





























 
    volatile uint32_t CLKSEL2;

    














 
    volatile uint32_t CLKSEL3;

    














 
    volatile uint32_t CLKDIV0;

    








 
    volatile uint32_t CLKDIV1;
    uint32_t RESERVE0[6];


    




























 
    volatile uint32_t PLLCTL;
    uint32_t RESERVE1[3];


    




























 
    volatile const  uint32_t STATUS;
    uint32_t RESERVE2[3];


    






















 
    volatile uint32_t CLKOCTL;
    uint32_t RESERVE3[3];


    
























 
    volatile uint32_t CLKDCTL;

    


















 
    volatile uint32_t CLKDSTS;

    









 
    volatile uint32_t CDUPB;

    









 
    volatile uint32_t CDLOWB;

} CLK_T;




 





































































































































































































































































































   
   



 



 

typedef struct
{


    













































 
    volatile uint32_t CTL;

    









 
    volatile uint32_t DAT;

    








 
    volatile uint32_t SEED;

    








 
    volatile const  uint32_t CHECKSUM;

} CRC_T;




 


































   
   


 



 

typedef struct
{

    












































 
    volatile uint32_t CTL;
    










 
    volatile uint32_t SWTRG;
    











 
    volatile uint32_t DAT;
    









 
    volatile const  uint32_t DATOUT;
    




















 
    volatile uint32_t STATUS;
    









 
    volatile uint32_t TCTL;

} DAC_T;




 




















































   
   


 



 

typedef struct
{


    




































 
    volatile uint32_t CTL0;

    


























 
    volatile uint32_t TCTL0;
    uint32_t RESERVE0[2];


    




































 
    volatile uint32_t CTL1;

    


























 
    volatile uint32_t TCTL1;

} EBI_T;




 









































































   
   


 



 

typedef struct
{


    






















































 
    volatile uint32_t ISPCTL;

    











 
    volatile uint32_t ISPADDR;

    












 
    volatile uint32_t ISPDAT;

    























 
    volatile uint32_t ISPCMD;

    










 
    volatile uint32_t ISPTRG;

    










 
    volatile const  uint32_t DFBA;

    












 
    volatile uint32_t FTCTL;
    uint32_t RESERVE0[9];


    














































 
    volatile const  uint32_t ISPSTS;
    uint32_t RESERVE1[15];


    








 
    volatile uint32_t MPDAT0;

    








 
    volatile uint32_t MPDAT1;

    








 
    volatile uint32_t MPDAT2;

    








 
    volatile uint32_t MPDAT3;
    uint32_t RESERVE2[12];


    











































 
    volatile const  uint32_t MPSTS;

    









 
    volatile const  uint32_t MPADDR;
    uint32_t RESERVE3[972];


    














 
    volatile const  uint32_t FUNCASS;

} FMC_T;





 














































































































   
   


 



 

typedef struct
{

    






































































































































































































































 
    volatile uint32_t MODE;

    






















































































































































 
    volatile uint32_t DINOFF;

    






































































































































 
    volatile uint32_t DOUT;

    






















































































































































































 
    volatile uint32_t DATMSK;

    






















































































































 
    volatile const  uint32_t PIN;

    






































































































































































































 
    volatile uint32_t DBEN;

    






































































































































































































































 
    volatile uint32_t INTTYPE;

    






































































































































































































































































































































































































 
    volatile uint32_t INTEN;

    






















































































































































































 
    volatile uint32_t INTSRC;

    






















































































































 
    volatile uint32_t SMTEN;

    






































































































































 
    volatile uint32_t SLEWCTL;

} GPIO_T;

typedef struct
{

    






























 

    volatile uint32_t DBCTL;

} GPIO_DBCTL_T;





 











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































   
   


 



 

typedef struct
{


    





























 
    volatile uint32_t CTL;

    













 
    volatile uint32_t ADDR0;

    








 
    volatile uint32_t DAT;

    























 
    volatile const  uint32_t STATUS;

    









 
    volatile uint32_t CLKDIV;

    


















 
    volatile uint32_t TOCTL;

    













 
    volatile uint32_t ADDR1;

    













 
    volatile uint32_t ADDR2;

    













 
    volatile uint32_t ADDR3;

    












 
    volatile uint32_t ADDRMSK0;

    












 
    volatile uint32_t ADDRMSK1;

    












 
    volatile uint32_t ADDRMSK2;

    












 
    volatile uint32_t ADDRMSK3;
    uint32_t RESERVE0[2];


    









 
    volatile uint32_t WKCTL;

    









 
    volatile uint32_t WKSTS;

    




























































 
    volatile uint32_t BUSCTL;

    































 
    volatile uint32_t BUSTCTL;

    











































 
    volatile uint32_t BUSSTS;

    









 
    volatile uint32_t PKTSIZE;

    









 
    volatile const  uint32_t PKTCRC;

    









 
    volatile uint32_t BUSTOUT;

    









 
    volatile uint32_t CLKTOUT;

} I2C_T;




 







































































































































































   
   

 



 

typedef struct
{
    





































 
    volatile uint32_t CTL;                    

    




























 
    volatile uint32_t PHYCTL;                 

    
























































 
    volatile uint32_t INTEN;                  

    



































































 
    volatile uint32_t INTSTS;                 

    




























 
    volatile const  uint32_t STATUS;                 

} OTG_T;




 




























































































































   
   


 



 

typedef struct
{
    



















































 
    volatile uint32_t CTL;

    








 
    volatile uint32_t SA;

    








 
    volatile uint32_t DA;

    











 
    volatile uint32_t NEXT;
} DSCT_T;

typedef struct
{
    




 
    DSCT_T DSCT[12];

    









 
    volatile const  uint32_t CURSCAT0;

    








 
    volatile const  uint32_t CURSCAT1;               

    









 
    volatile const  uint32_t CURSCAT2;

    









 
    volatile const  uint32_t CURSCAT3;

    









 
    volatile const  uint32_t CURSCAT4;

    









 
    volatile const  uint32_t CURSCAT5;

    









 
    volatile const  uint32_t CURSCAT6;

    









 
    volatile const  uint32_t CURSCAT7;

    









 
    volatile const  uint32_t CURSCAT8;

    









 
    volatile const  uint32_t CURSCAT9;

    









 
    volatile const  uint32_t CURSCAT10;

    









 
    volatile const  uint32_t CURSCAT11;
    uint32_t RESERVE0[196];

    













 
    volatile uint32_t CHCTL;

    
















 
    volatile  uint32_t STOP;

    













 
    volatile  uint32_t SWREQ;

    













 
    volatile const  uint32_t TRGSTS;

    















 
    volatile uint32_t PRISET;

    











 
    volatile  uint32_t PRICLR;

    











 
    volatile uint32_t INTEN;

    







































 
    volatile uint32_t INTSTS;

    










 
    volatile uint32_t ABTSTS;

    










 
    volatile uint32_t TDSTS;

    











 
    volatile uint32_t SCATSTS;

    










 
    volatile const  uint32_t TACTSTS;
    uint32_t RESERVE1[3];

    











 
    volatile uint32_t SCATBA;
    uint32_t RESERVE2[16];

    


















































 
    volatile uint32_t REQSEL0_3;

    


























 
    volatile uint32_t REQSEL4_7;

    


























 
    volatile uint32_t REQSEL8_11;
    uint32_t RESERVE4[733];
} PDMA_T;




 



































































































































































































































































































































































































































































































































































   
   


 



 

typedef struct
{
    





































 
    volatile uint32_t CTL0;

    























 
    volatile uint32_t CTL1;

    





































 
    volatile uint32_t SYNC;

    









 
    volatile uint32_t SWSYNC;

    



























 
    volatile uint32_t CLKSRC;

    










 
    volatile uint32_t CLKPSC0_1;

    










 
    volatile uint32_t CLKPSC2_3;

    










 
    volatile uint32_t CLKPSC4_5;

    










 
    volatile uint32_t CNTEN;

    










 
    volatile uint32_t CNTCLR;

    
















 
    volatile uint32_t LOAD;
    uint32_t RESERVE0[1];

    












 
    volatile uint32_t PERIOD0;

    












 
    volatile uint32_t PERIOD1;

    












 
    volatile uint32_t PERIOD2;

    












 
    volatile uint32_t PERIOD3;

    












 
    volatile uint32_t PERIOD4;

    












 
    volatile uint32_t PERIOD5;
    uint32_t RESERVE1[2];

    










 
    volatile uint32_t CMPDAT0;

    










 
    volatile uint32_t CMPDAT1;

    










 
    volatile uint32_t CMPDAT2;

    










 
    volatile uint32_t CMPDAT3;

    










 
    volatile uint32_t CMPDAT4;

    










 
    volatile uint32_t CMPDAT5;
    uint32_t RESERVE2[2];

    
















 
    volatile uint32_t DTCTL0_1;

    
















 
    volatile uint32_t DTCTL2_3;

    
















 
    volatile uint32_t DTCTL4_5;
    uint32_t RESERVE3[1];

    








 
    volatile uint32_t PHS0_1;

    








 
    volatile uint32_t PHS2_3;

    








 
    volatile uint32_t PHS4_5;
    uint32_t RESERVE4[1];

    











 
    volatile const  uint32_t CNT0;

    











 
    volatile const  uint32_t CNT1;

    











 
    volatile const  uint32_t CNT2;

    











 
    volatile const  uint32_t CNT3;

    











 
    volatile const  uint32_t CNT4;

    











 
    volatile const  uint32_t CNT5;
    uint32_t RESERVE5[2];

    





















 
    volatile uint32_t WGCTL0;

    






















 
    volatile uint32_t WGCTL1;

    












 
    volatile uint32_t MSKEN;

    











 
    volatile uint32_t MSK;

    








































 
    volatile uint32_t BNF;

    


















 
    volatile uint32_t FAILBRK;

    


























































 
    volatile uint32_t BRKCTL0_1;

    


























































 
    volatile uint32_t BRKCTL2_3;

    


























































 
    volatile uint32_t BRKCTL4_5;

    











 
    volatile uint32_t POLCTL;

    










 
    volatile uint32_t POEN;

    










 
    volatile  uint32_t SWBRK;

    




































 
    volatile uint32_t INTEN0;

    






























 
    volatile uint32_t INTEN1;

    




























 
    volatile uint32_t INTSTS0;

    












































































































 
    volatile uint32_t INTSTS1;

    



















































 
    volatile uint32_t IFA;

    






























 
    volatile uint32_t DACTRGEN;

    














































































 
    volatile uint32_t EADCTS0;

    










































 
    volatile uint32_t EADCTS1;

    









 
    volatile uint32_t FTCMPDAT0_1;

    









 
    volatile uint32_t FTCMPDAT2_3;

    









 
    volatile uint32_t FTCMPDAT4_5;
    uint32_t RESERVE6[1];

    











 
    volatile uint32_t SSCTL;

    










 
    volatile  uint32_t SSTRG;
    uint32_t RESERVE7[2];

    





















 
    volatile uint32_t STATUS;
    uint32_t RESERVE8[55];

    












 
    volatile uint32_t CAPINEN;

    























 
    volatile uint32_t CAPCTL;

    














 
    volatile const  uint32_t CAPSTS;

    








 
    volatile const  uint32_t RCAPDAT0;

    








 
    volatile const  uint32_t FCAPDAT0;

    








 
    volatile const  uint32_t RCAPDAT1;

    








 
    volatile const  uint32_t FCAPDAT1;

    








 
    volatile const  uint32_t RCAPDAT2;

    








 
    volatile const  uint32_t FCAPDAT2;

    








 
    volatile const  uint32_t RCAPDAT3;

    








 
    volatile const  uint32_t FCAPDAT3;

    








 
    volatile const  uint32_t RCAPDAT4;

    








 
    volatile const  uint32_t FCAPDAT4;

    








 
    volatile const  uint32_t RCAPDAT5;

    








 
    volatile const  uint32_t FCAPDAT5;

    



















































 
    volatile uint32_t PDMACTL;

    









 
    volatile const  uint32_t PDMACAP0_1;

    









 
    volatile const  uint32_t PDMACAP2_3;

    









 
    volatile const  uint32_t PDMACAP4_5;
    uint32_t RESERVE9[1];

    
















 
    volatile uint32_t CAPIEN;

    
















 
    volatile uint32_t CAPIF;
    uint32_t RESERVE10[43];

    









 
    volatile const  uint32_t PBUF0;

    









 
    volatile const  uint32_t PBUF1;

    









 
    volatile const  uint32_t PBUF2;

    









 
    volatile const  uint32_t PBUF3;

    









 
    volatile const  uint32_t PBUF4;

    









 
    volatile const  uint32_t PBUF5;

    









 
    volatile const  uint32_t CMPBUF0;

    









 
    volatile const  uint32_t CMPBUF1;

    









 
    volatile const  uint32_t CMPBUF2;

    









 
    volatile const  uint32_t CMPBUF3;

    









 
    volatile const  uint32_t CMPBUF4;

    









 
    volatile const  uint32_t CMPBUF5;
    uint32_t RESERVE11[3];

    








 
    volatile const  uint32_t FTCBUF0_1;

    








 
    volatile const  uint32_t FTCBUF2_3;

    








 
    volatile const  uint32_t FTCBUF4_5;

    












 
    volatile uint32_t FTCI;
    uint32_t RESERVE12[812];
} PWM_T;




 























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































   
   


 



 

typedef struct
{


    














 
    volatile uint32_t INIT;

    












 
    volatile  uint32_t RWEN;

    










 
    volatile uint32_t FREQADJ;

    












 
    volatile uint32_t TIME;

    












 
    volatile uint32_t CAL;

    










 
    volatile uint32_t CLKFMT;

    















 
    volatile uint32_t WEEKDAY;

    












 
    volatile uint32_t TALM;

    












 
    volatile uint32_t CALM;

    









 
    volatile const  uint32_t LEAPYEAR;

    















 
    volatile uint32_t INTEN;

    
























 
    volatile uint32_t INTSTS;

    

















 
    volatile uint32_t TICK;

    












 
    volatile uint32_t TAMSK;

    












 
    volatile uint32_t CAMSK;

    
































 
    volatile uint32_t SPRCTL;

    










 
    volatile uint32_t SPR[20];
    uint32_t RESERVE0[28];


    































 
    volatile uint32_t LXTCTL;

    





















 
    volatile uint32_t LXTOCTL;

    





















 
    volatile uint32_t LXTICTL;

    






















 
    volatile uint32_t TAMPCTL;

} RTC_T;




 


















































































































































































































































































   
   


 



 

typedef struct
{
    












 
    volatile uint32_t DAT;
    






























































































 
    volatile uint32_t CTL;
    




















































































































 
    volatile uint32_t ALTCTL;
    










 
    volatile uint32_t EGT;
    












 
    volatile uint32_t RXTOUT;
    
















 
    volatile uint32_t ETUCTL;
    



















































 
    volatile uint32_t INTEN;
    


















































 
    volatile uint32_t INTSTS;
    





























































































 
    volatile uint32_t STATUS;
    














































































 
    volatile uint32_t PINCTL;
    











 
    volatile uint32_t TMRCTL0;
    











 
    volatile uint32_t TMRCTL1;
    











 
    volatile uint32_t TMRCTL2;
    


























 
    volatile uint32_t UARTCTL;
    








 
    volatile const  uint32_t TMRDAT0;
    










 
    volatile const  uint32_t TMRDAT1_2;

} SC_T;




 






















































































































































































































































































































   
   


 



 

typedef struct
{
    









































































 
    volatile uint32_t CTL;                    

    











 
    volatile uint32_t CLKDIV;                 

    

















































 
    volatile uint32_t SSCTL;                  

    

















 
    volatile uint32_t PDMACTL;                

    


























































 
    volatile uint32_t FIFOCTL;                

    


































































































 
    volatile uint32_t STATUS;                 

    uint32_t RESERVE0[2];

    












 
    volatile  uint32_t TX;                     

    uint32_t RESERVE1[3];

    











 
    volatile const  uint32_t RX;                     

    uint32_t RESERVE2[11];

    


































































 
    volatile uint32_t I2SCTL;                 

    

















 
    volatile uint32_t I2SCLK;                 

    





























































 
    volatile uint32_t I2SSTS;                 

} SPI_T;




 




































































































































































































































































































   
   


 



 

typedef struct
{


    









 
    volatile const  uint32_t PDID;

    












































 
    volatile uint32_t RSTSTS;

    









































 
    volatile uint32_t IPRST0;

    































































 
    volatile uint32_t IPRST1;

    





















 
    volatile uint32_t IPRST2;

    volatile uint32_t RESERVE0[1];

    






































































 
    volatile uint32_t BODCTL;

    

















 
    volatile uint32_t IVSCTL;
    uint32_t RESERVE1[1];


    












 
    volatile uint32_t PORCTL;

    














 
    volatile uint32_t VREFCTL;

    

















 
    volatile uint32_t USBPHY;

    














 
    volatile uint32_t GPA_MFPL;

    














 
    volatile uint32_t GPA_MFPH;

    














 
    volatile uint32_t GPB_MFPL;

    














 
    volatile uint32_t GPB_MFPH;

    














 
    volatile uint32_t GPC_MFPL;

    














 
    volatile uint32_t GPC_MFPH;

    














 
    volatile uint32_t GPD_MFPL;

    














 
    volatile uint32_t GPD_MFPH;

    














 
    volatile uint32_t GPE_MFPL;

    













 
    volatile uint32_t GPE_MFPH;

    














 
    volatile uint32_t GPF_MFPL;
    uint32_t RESERVE2[25];


    









 
    volatile uint32_t SRAM_INTCTL;

    









 
    volatile const  uint32_t SRAM_STATUS;

    








 
    volatile const  uint32_t SRAM_ERRADDR;
    uint32_t RESERVE3[1];


    




























 
    volatile uint32_t SRAM_BISTCTL;

    














































 
    volatile const  uint32_t SRAM_BISTSTS;
    uint32_t RESERVE4[6];


    

































 
    volatile uint32_t IRCTCTL;

    
















 
    volatile uint32_t IRCTIEN;

    























 
    volatile uint32_t IRCTISTS;
    uint32_t RESERVE5[1];


    






















































 
    volatile uint32_t REGLCTL;
    uint32_t RESERVE6[4];

    








 
    volatile const  uint32_t TSOFFSET;

} SYS_T;




 































































































































































































































































































































































































































































































































   
   


 



 

typedef struct
{
    




























































































 
    volatile uint32_t CTL;

    









































































 
    volatile uint32_t REFCTL;

    














 
    volatile uint32_t CCBDAT0;

    














 
    volatile uint32_t CCBDAT1;

    














 
    volatile uint32_t CCBDAT2;

    














 
    volatile uint32_t CCBDAT3;

    









 
    volatile uint32_t CCBDAT4;

    













 
    volatile uint32_t IDLESEL;

    












 
    volatile uint32_t POLSEL;

    













































































 
    volatile uint32_t POLCTL;

    



















































































 
    volatile uint32_t STATUS;                 

    














 
    volatile const  uint32_t DAT0;

    














 
    volatile const  uint32_t DAT1;

    














 
    volatile const  uint32_t DAT2;

    














 
    volatile const  uint32_t DAT3;

    








 
    volatile const  uint32_t DAT4;

    
















 
    volatile uint32_t INTEN;                  

    














 
    volatile uint32_t TH0_1;

    














 
    volatile uint32_t TH2_3;

    














 
    volatile uint32_t TH4_5;

    














 
    volatile uint32_t TH6_7;

    














 
    volatile uint32_t TH8_9;

    














 
    volatile uint32_t TH10_11;

    














 
    volatile uint32_t TH12_13;

    














 
    volatile uint32_t TH14_15;

    










 
    volatile uint32_t TH16;
    uint32_t RESERVE0[998];
} TK_T;




 



















































































































































































































































































































































































































































































   
   


 



 

typedef struct
{


    











































































 
    volatile uint32_t CTL;

    













 
    volatile uint32_t CMP;

    
















 
    volatile uint32_t INTSTS;

    










 
    volatile const  uint32_t CNT;

    








 
    volatile const  uint32_t CAP;

    






































 
    volatile uint32_t EXTCTL;

    














 
    volatile uint32_t EINTSTS;

} TIMER_T;




 





















































































   
   


 



 

typedef struct
{


    












 
    volatile uint32_t DAT;

    

























































 
    volatile uint32_t INTEN;

    




































 
    volatile uint32_t FIFO;

    


































 
    volatile uint32_t LINE;

    






















 
    volatile uint32_t MODEM;

    




















 
    volatile  uint32_t MODEMSTS;

    
























































































 
    volatile  uint32_t FIFOSTS;

    












































































































































 
    volatile  uint32_t INTSTS;

    















 
    volatile uint32_t TOUT;

    
























 
    volatile uint32_t BAUD;

    
















 
    volatile uint32_t IRDA;

    


















































 
    volatile uint32_t ALTCTL;

    












 
    volatile uint32_t FUNCSEL;

    

















































































 
    volatile uint32_t LINCTL;

    













































 
    volatile  uint32_t LINSTS;

} UART_T;




 
























































































































































































































































































































































   
   


 



 



 
typedef struct
{
    











 
    volatile uint32_t BUFSEG;

    
















 
    volatile uint32_t MXPLD;

    

























 
    volatile uint32_t CFG;

    















 
    volatile uint32_t CFGP;
} USBD_EP_T;


typedef struct
{
    


























 
    volatile uint32_t INTEN;

    
















































 
    volatile uint32_t INTSTS;

    







 
    volatile uint32_t FADDR;

    










































































 
    volatile const  uint32_t EPSTS;

    





































 
    volatile uint32_t ATTR;

    









 
    volatile const  uint32_t VBUSDET;

    











 
    volatile uint32_t STBUFSEG;
    uint32_t RESERVE0[29];

    










 
    volatile uint32_t SE0;
    uint32_t RESERVE1[283];

    USBD_EP_T EP[8];                  
    uint32_t RESERVE2[672];
} USBD_T;




 























































































































































   
   


 



 

typedef struct
{


    










 
    volatile const  uint32_t HcRevision;

    









































 
    volatile uint32_t HcControl;

    


























 
    volatile uint32_t HcCommandStatus;

    
































 
    volatile uint32_t HcInterruptStatus;

    

























































 
    volatile uint32_t HcInterruptEnable;

    
























































 
    volatile uint32_t HcInterruptDisable;

    








 
    volatile uint32_t HcHCCA;

    








 
    volatile uint32_t HcPeriodCurrentED;

    








 
    volatile uint32_t HcControlHeadED;

    








 
    volatile uint32_t HcControlCurrentED;

    








 
    volatile uint32_t HcBulkHeadED;

    








 
    volatile uint32_t HcBulkCurrentED;

    








 
    volatile uint32_t HcDoneHead;

    















 
    volatile uint32_t HcFmInterval;

    












 
    volatile const  uint32_t HcFmRemaining;

    









 
    volatile const  uint32_t HcFmNumber;

    








 
    volatile uint32_t HcPeriodicStart;

    










 
    volatile uint32_t HcLSThreshold;

    





















 
    volatile uint32_t HcRhDescriptorA;

    














 
    volatile uint32_t HcRhDescriptorB;

    










































 
    volatile uint32_t HcRhStatus;

    



























































































 
    volatile uint32_t HcRhPortStatus[2];
    uint32_t RESERVE0[105];

    










 
    volatile uint32_t HcPhyControl;

    




















 
    volatile uint32_t HcMiscControl;

} USBH_T;





 


































































































































































































































   
   


 



 

typedef struct
{


    

































































 
    volatile uint32_t CTL;

    















 
    volatile uint32_t ALTCTL;

} WDT_T;




 


































   
   


 



 

typedef struct
{


    










 
    volatile  uint32_t RLDCNT;

    








































 
    volatile uint32_t CTL;

    
















 
    volatile uint32_t STATUS;

    








 
    volatile const  uint32_t CNT;

} WWDT_T;




 




























   
   


   


 
 
 


 

 




 



 
#line 21407 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
#line 21422 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
#line 21436 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
   


 
 
 


 


#line 21461 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"








#line 21490 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
#line 21524 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 










#line 21542 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"





#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 








 











 



 



 


 
 
 
#line 42 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"

#line 62 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"








 
 
 
#line 79 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


 
 
 






 

#line 100 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 109 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 119 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 129 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"




























































#line 197 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 207 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 215 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"









#line 231 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 240 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 249 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 258 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"









































#line 306 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 315 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 323 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 331 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 339 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


























































#line 403 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 412 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 422 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 432 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 440 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 449 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 459 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 467 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"

















































#line 524 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


















#line 548 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 556 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"























#line 585 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 593 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"





















































   




 







 








 








 








 








 









 








 








 








 












 








 








 








 








 








 








 








 








 








 








 














 



 
 
 








 
static __inline void SYS_UnlockReg(void)
{
    do
    {
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x59;
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x16;
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x88;
    }
    while(((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL == 0);
}







 
static __inline void SYS_LockReg(void)
{
    ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0;
}


void SYS_ClearResetSrc(uint32_t u32Src);
uint32_t SYS_GetBODStatus(void);
uint32_t SYS_GetResetSrc(void);
uint32_t SYS_IsRegLocked(void);
uint32_t SYS_ReadPDID(void);
void SYS_ResetChip(void);
void SYS_ResetCPU(void);
void SYS_ResetModule(uint32_t u32ModuleIndex);
void SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel);
void SYS_DisableBOD(void);


   

   

   






#line 21548 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"









 










 



 



 


#line 39 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

 
 
 






 
 
 



















 
 
 




#line 84 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 91 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 98 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 105 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"














 
 
 






















 
 
 









 
 
 






 
 
 



 
 
 
















 
 
 

 

#line 206 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 215 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"








































































































































   




 







 
static __inline uint32_t CLK_GetPLLClockFreq(void)
{
    uint32_t u32PllFreq = 0, u32PllReg;
    uint32_t u32FIN, u32NF, u32NR, u32NO;
    uint8_t au8NoTbl[4] = {1, 2, 2, 4};

    u32PllReg = ((CLK_T *) ((0x40000000UL) + 0x00200))->PLLCTL;

    if(u32PllReg & ((0x1ul << (16)) | (0x1ul << (18))))
        return 0;            

    if(u32PllReg & 0x00080000UL)
        u32FIN = (22118400UL);     
    else
        u32FIN = (12000000UL);      

    if(u32PllReg & (0x1ul << (17)))
        return u32FIN;       

     
    u32NO = au8NoTbl[((u32PllReg & (0x3ul << (14))) >> (14))];
    u32NF = ((u32PllReg & (0x1fful << (0))) >> (0)) + 2;
    u32NR = ((u32PllReg & (0x1ful << (9))) >> (9)) + 2;

     
    u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);

    return u32PllFreq;
}









 
static __inline void CLK_SysTickDelay(uint32_t us)
{
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = us * CyclesPerUs;
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x00);
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2) | (1UL << 0);

     
    while((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16)) == 0);
}


void CLK_DisableCKO(void);
void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En);
void CLK_PowerDown(void);
void CLK_Idle(void);
uint32_t CLK_GetHXTFreq(void);
uint32_t CLK_GetLXTFreq(void);
uint32_t CLK_GetHCLKFreq(void);
uint32_t CLK_GetPCLKFreq(void);
uint32_t CLK_GetCPUFreq(void);
uint32_t CLK_SetCoreClock(uint32_t u32Hclk);
void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv);
void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv);
void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc);
void CLK_EnableXtalRC(uint32_t u32ClkMask);
void CLK_DisableXtalRC(uint32_t u32ClkMask);
void CLK_EnableModuleClock(uint32_t u32ModuleIdx);
void CLK_DisableModuleClock(uint32_t u32ModuleIdx);
uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq);
void CLK_DisablePLL(void);
uint32_t CLK_WaitClockReady(uint32_t u32ClkMask);



   

   

   





#line 21549 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"
 









 











 



 



 





 
 
 






 
 
 







 
 
 




 
 
 






#line 88 "..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"















 
#line 192 "..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"


   




 













 














 













 














 














 














 














 















 



















 










 











 










 



void GPIO_SetMode(GPIO_T *port, uint32_t u32PinMask, uint32_t u32Mode);
void GPIO_EnableInt(GPIO_T *port, uint32_t u32Pin, uint32_t u32IntAttribs);
void GPIO_DisableInt(GPIO_T *port, uint32_t u32Pin);


   

   

   








 
#line 21550 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"
 









 



#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"









 



















 







 

#line 21601 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 

#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"









 



 



 

 
 
 
#line 49 "..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"

 
 
 



 
 
 





   



 









 










 










 










 










 











 










 











 











 










 











 











 












 












 












 












 












 











 












 











 











 











 











 











 











 


void I2C_ClearTimeoutFlag(I2C_T *i2c);
void I2C_Close(I2C_T *i2c);
void I2C_Trigger(I2C_T *i2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Si, uint8_t u8Ack);
void I2C_DisableInt(I2C_T *i2c);
void I2C_EnableInt(I2C_T *i2c);
uint32_t I2C_GetBusClockFreq(I2C_T *i2c);
uint32_t I2C_GetIntFlag(I2C_T *i2c);
uint32_t I2C_GetStatus(I2C_T *i2c);
uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock);
uint8_t I2C_GetData(I2C_T *i2c);
void I2C_SetSlaveAddr(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddr, uint8_t u8GCMode);
void I2C_SetSlaveAddrMask(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddrMask);
uint32_t I2C_SetClockBusFreq(I2C_T *i2c, uint32_t u32BusClock);
void I2C_EnableTimeout(I2C_T *i2c, uint8_t u8LongTimeout);
void I2C_DisableTimeout(I2C_T *i2c);
void I2C_EnableWakeup(I2C_T *i2c);
void I2C_DisableWakeup(I2C_T *i2c);
void I2C_SetData(I2C_T *i2c, uint8_t u8Data);

uint32_t I2C_SMBusGetStatus(I2C_T *i2c);
void I2C_SMBusClearInterruptFlag(I2C_T *i2c, uint8_t u8ClrSMBusIntFlag);
void I2C_SMBusSetPacketByteCount(I2C_T *i2c, uint32_t u32PktSize);
void I2C_SMBusOpen(I2C_T *i2c, uint8_t u8HostDevice);
void I2C_SMBusClose(I2C_T *i2c);
void I2C_SMBusPECTxEnable(I2C_T *i2c, uint8_t u8PECTxEn);
uint8_t I2C_SMBusGetPECValue(I2C_T *i2c);
void I2C_SMBusIdleTimeout(I2C_T *i2c, uint32_t us, uint32_t u32Hclk);
void I2C_SMBusTimeout(I2C_T *i2c, uint32_t ms, uint32_t u32Pclk);
void I2C_SMBusClockLoTimeout(I2C_T *i2c, uint32_t ms, uint32_t u32Pclk);
   

   

   

#line 21551 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\crc.h"
 








 











 



 



 
 
 
 





 
 
 





 
 
 




   




 












 










 










 


void CRC_Open(uint32_t u32Mode, uint32_t u32Attribute, uint32_t u32Seed, uint32_t u32DataLen);
uint32_t CRC_GetChecksum(void);

   

   

   







 
#line 21552 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\ebi.h"
 








 











 



 



 
 
 
 




 
 
 



 
 
 



 
 
 



 
 
 
#line 65 "..\\..\\..\\Library\\StdDriver\\inc\\ebi.h"

#line 73 "..\\..\\..\\Library\\StdDriver\\inc\\ebi.h"

   




 









 











 










 











 










 











 










 











 










 











 










 











 


void EBI_Open(uint32_t u32Bank, uint32_t u32DataWidth, uint32_t u32TimingClass, uint32_t u32BusMode, uint32_t u32CSActiveLevel);
void EBI_Close(uint32_t u32Bank);
void EBI_SetBusTiming(uint32_t u32Bank, uint32_t u32TimingConfig, uint32_t u32MclkDiv);

   

   

   







 
#line 21553 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"
 








 











 



 



 
 
 
 



 
 
 





 
 
 
#line 56 "..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"

 
 
 
#line 67 "..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"

 
 
 






 
 
 




   




 


 
typedef struct
{
    uint32_t u32Year;            
    uint32_t u32Month;           
    uint32_t u32Day;             
    uint32_t u32DayOfWeek;       
    uint32_t u32Hour;            
    uint32_t u32Minute;          
    uint32_t u32Second;          
    uint32_t u32TimeScale;       
    uint32_t u32AmPm;            
} S_RTC_TIME_DATA_T;

   




 










 










 










 










 











 











 











 










 










 












 













 










 
static __inline void RTC_WaitAccessEnable(void)
{
     
    while((((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN & (0x1ul << (16))) == (0x1ul << (16)));
    ((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN = 0x0000A965UL;

     
    while((((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN & (0x1ul << (16))) == 0x0);
}

void RTC_Open(S_RTC_TIME_DATA_T *sPt);
void RTC_Close(void);
void RTC_32KCalibration(int32_t i32FrequencyX100);
void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek);
void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day);
void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
uint32_t RTC_GetDayOfWeek(void);
void RTC_SetTickPeriod(uint32_t u32TickSelection);
void RTC_EnableInt(uint32_t u32IntFlagMask);
void RTC_DisableInt(uint32_t u32IntFlagMask);
void RTC_EnableSpareAccess(void);
void RTC_DisableSpareRegister(void);
void RTC_EnableSnooperDetection(uint32_t u32PinCondition);
void RTC_DisableSnooperDetection(void);

   

   

   







 
#line 21554 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\timer.h"
 








 











 



 



 
 
 
 
#line 47 "..\\..\\..\\Library\\StdDriver\\inc\\timer.h"

   




 













 












 











 













 










 
static __inline void TIMER_Start(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (30));
}









 
static __inline void TIMER_Stop(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (30));
}











 
static __inline void TIMER_EnableWakeup(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (23));
}









 
static __inline void TIMER_DisableWakeup(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (23));
}









 
static __inline void TIMER_EnableCaptureDebounce(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (6));
}









 
static __inline void TIMER_DisableCaptureDebounce(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (6));
}









 
static __inline void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (7));
}









 
static __inline void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (7));
}









 
static __inline void TIMER_EnableInt(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (29));
}









 
static __inline void TIMER_DisableInt(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (29));
}









 
static __inline void TIMER_EnableCaptureInt(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (5));
}









 
static __inline void TIMER_DisableCaptureInt(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (5));
}










 
static __inline uint32_t TIMER_GetIntFlag(TIMER_T *timer)
{
    return ((timer->INTSTS & (0x1ul << (0))) ? 1 : 0);
}









 
static __inline void TIMER_ClearIntFlag(TIMER_T *timer)
{
    timer->INTSTS = (timer->INTSTS & ~(0x1ul << (1))) | (0x1ul << (0));
}










 
static __inline uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
{
    return timer->EINTSTS;
}









 
static __inline void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
{
    timer->EINTSTS = (0x1ul << (0));
}










 
static __inline uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
{
    return (timer->INTSTS & (0x1ul << (1)) ? 1 : 0);
}









 
static __inline void TIMER_ClearWakeupFlag(TIMER_T *timer)
{
    timer->INTSTS = (timer->INTSTS & ~(0x1ul << (0))) | (0x1ul << (1));
}









 
static __inline uint32_t TIMER_GetCaptureData(TIMER_T *timer)
{
    return timer->CAP;
}









 
static __inline uint32_t TIMER_GetCounter(TIMER_T *timer)
{
    return timer->CNT;
}

uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq);
void TIMER_Close(TIMER_T *timer);
void TIMER_Delay(TIMER_T *timer, uint32_t u32Usec);
void TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge);
void TIMER_DisableCapture(TIMER_T *timer);
void TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge);
void TIMER_DisableEventCounter(TIMER_T *timer);
uint32_t TIMER_GetModuleClock(TIMER_T *timer);

   

   

   







 
#line 21555 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\wdt.h"
 








 











 



 



 
 
 
 
#line 42 "..\\..\\..\\Library\\StdDriver\\inc\\wdt.h"

 
 
 





   




 









 










 










 











 











 











 













 










 
static __inline void WDT_Close(void)
{
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL = 0;
    return;
}









 
static __inline void WDT_EnableInt(void)
{
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL |= (0x1ul << (6));
    return;
}









 
static __inline void WDT_DisableInt(void)
{
    
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL &= ~((0x1ul << (6)) | (0x1ul << (2)) | (0x1ul << (3)) | (0x1ul << (5)));
    return;
}

void WDT_Open(uint32_t u32TimeoutInterval, uint32_t u32ResetDelay, uint32_t u32EnableReset, uint32_t u32EnableWakeup);

   

   

   







 
#line 21556 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\wwdt.h"
 








 











 



 



 
 
 
 
#line 50 "..\\..\\..\\Library\\StdDriver\\inc\\wwdt.h"

 
 
 


   




 









 










 











 











 










 













 


void WWDT_Open(uint32_t u32PreScale, uint32_t u32CmpValue, uint32_t u32EnableInt);

   

   

   







 
#line 21557 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"









 



 
 
 
#line 18 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"









 



 



 













 
#line 61 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"

 
#line 71 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"


 





 



 





 



 




 





 



 



 
#line 120 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"

   




 






 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 








 








 








 







 








 







 







 







 







 









 







 







 








 








 







 







 











 
static __inline void I2S_ENABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
{
    if(u32ChMask == 0)
        i2s->I2SCTL |= (0x1ul << (16));
    else
        i2s->I2SCTL |= (0x1ul << (17));
}









 
static __inline void I2S_DISABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
{
    if(u32ChMask == 0)
        i2s->I2SCTL &= ~(0x1ul << (16));
    else
        i2s->I2SCTL &= ~(0x1ul << (17));
}






 







 







 







 







 







 







 







 







 







 







 







 










 
static __inline void I2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, uint32_t u32Ch)
{
    u32Ch == (0x1ul << (23)) ?
    (i2s->I2SCTL |= (0x1ul << (23))) :
    (i2s->I2SCTL &= ~(0x1ul << (23)));
}







 







 








 









 







 







 




 
uint32_t SPI_Open(SPI_T *spi, uint32_t u32MasterSlave, uint32_t u32SPIMode, uint32_t u32DataWidth, uint32_t u32BusClock);
void SPI_Close(SPI_T *spi);
void SPI_ClearRxFIFO(SPI_T *spi);
void SPI_ClearTxFIFO(SPI_T *spi);
void SPI_DisableAutoSS(SPI_T *spi);
void SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
uint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock);
void SPI_SetFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
uint32_t SPI_GetBusClock(SPI_T *spi);
void SPI_EnableInt(SPI_T *spi, uint32_t u32Mask);
void SPI_DisableInt(SPI_T *spi, uint32_t u32Mask);
uint32_t SPI_GetIntFlag(SPI_T *spi, uint32_t u32Mask);
void SPI_ClearIntFlag(SPI_T *spi, uint32_t u32Mask);
uint32_t SPI_GetStatus(SPI_T *spi, uint32_t u32Mask);

uint32_t I2S_Open(SPI_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat);
void I2S_Close(SPI_T *i2s);
void I2S_EnableInt(SPI_T *i2s, uint32_t u32Mask);
void I2S_DisableInt(SPI_T *i2s, uint32_t u32Mask);
uint32_t I2S_EnableMCLK(SPI_T *i2s, uint32_t u32BusClock);
void I2S_DisableMCLK(SPI_T *i2s);
void I2S_SetFIFO(SPI_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold);


   

   

   







 
#line 21558 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"
 








 











 



 



 
#line 37 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"

#line 48 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"


   




 





















 






















 











 
#line 120 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"











 
#line 139 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"










 
#line 157 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"










 
#line 175 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"







 









 









 








 
static __inline void SC_SetTxRetry(SC_T *sc, uint32_t u32Count)
{
    if(u32Count == 0)         
    {
        sc->CTL &= ~((0x7ul << (20)) | (0x1ul << (23)));
    }
    else
    {
        sc->CTL = (sc->CTL & ~(0x7ul << (20))) | ((u32Count - 1) << (20)) | (0x1ul << (23));
    }
}







 
static __inline void  SC_SetRxRetry(SC_T *sc, uint32_t u32Count)
{

    if(u32Count == 0)         
    {
        sc->CTL &= ~((0x7ul << (16)) | (0x1ul << (19)));
    }
    else
    {
        sc->CTL = (sc->CTL & ~(0x7ul << (16))) | ((u32Count - 1) << (16)) | (0x1ul << (19));
    }
}


uint32_t SC_IsCardInserted(SC_T *sc);
void SC_ClearFIFO(SC_T *sc);
void SC_Close(SC_T *sc);
void SC_Open(SC_T *sc, uint32_t u32CardDet, uint32_t u32PWR);
void SC_ResetReader(SC_T *sc);
void SC_SetBlockGuardTime(SC_T *sc, uint32_t u32BGT);
void SC_SetCharGuardTime(SC_T *sc, uint32_t u32CGT);
void SC_StopAllTimer(SC_T *sc);
void SC_StartTimer(SC_T *sc, uint32_t u32TimerNum, uint32_t u32Mode, uint32_t u32ETUCount);
void SC_StopTimer(SC_T *sc, uint32_t u32TimerNum);


   

   

   







 

#line 21559 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\scuart.h"
 








 











 



 



 













   




 

 







 











 









 









 










 









 



 







 










 










 










 









 


 













 














 
















 













 












 













 


void SCUART_Close(SC_T* sc);
uint32_t SCUART_Open(SC_T* sc, uint32_t u32baudrate);
uint32_t SCUART_Read(SC_T* sc, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
uint32_t SCUART_SetLineConfig(SC_T* sc, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t  u32StopBits);
void SCUART_SetTimeoutCnt(SC_T* sc, uint32_t u32TOC);
void SCUART_Write(SC_T* sc, uint8_t *pu8TxBuf, uint32_t u32WriteBytes);

   

   

   







 
#line 21560 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"
 









 



 
 
 
#line 19 "..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"









 



 




 



 
 
 
#line 65 "..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"

 
 
 




   




 

 
 
 








 








 













 








 








 









 








 








 








 








 








 








 








 








 








 













 








 








 

















 











 










 












 




 
void ACMP_Open(ACMP_T *, uint32_t u32ChNum, uint32_t u32NegSrc, uint32_t u32HysteresisEn);
void ACMP_Close(ACMP_T *, uint32_t u32ChNum);



   

   

   








 
#line 21561 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"









 



 
 
 
#line 18 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"










 



 



 

 
 
 






#line 55 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"

 
 
 




#line 84 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"







 
 
 
#line 100 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"

   



 
 
 
 






 









 







 









 








 








 








 










 









 










 










 










 










 










 









 








 








 








 








 










 








 










 








 








 








 








 








 








 















 
#line 403 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"














 
#line 427 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"














 
#line 451 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"














 
#line 475 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"







 








 










 








 







 







 







 







 


 
 
 
void EADC_Open(EADC_T *eadc, uint32_t u32InputMode);
void EADC_Close(EADC_T *eadc);
void EADC_ConfigSampleModule(EADC_T *eadc,                              uint32_t u32ModuleNum,                              uint32_t u32TriggerSource,                              uint32_t u32Channel);



void EADC_SetTriggerDelayTime(EADC_T *eadc,                               uint32_t u32ModuleNum,                               uint32_t u32TriggerDelayTime,                               uint32_t u32DelayClockDivider);



void EADC_SetInternalSampleTime(EADC_T *eadc, uint32_t u32SamplingTime);
void EADC_SetExtendSampleTime(EADC_T *eadc, uint32_t u32ModuleNum, uint32_t u32ExtendSamplingTime);

   

   

   







 
#line 21562 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\dac.h"









 



 
 
 
#line 18 "..\\..\\..\\Library\\StdDriver\\inc\\dac.h"










 



 




 

 
 
 






#line 60 "..\\..\\..\\Library\\StdDriver\\inc\\dac.h"





   




 
 
 
 






 








 








 








 








 








 







 








 








 







 







 







 







 












 








 









 









 








 








 







 


void DAC_Open(DAC_T *dac, uint32_t u32Ch, uint32_t u32TrgSrc);
void DAC_Close(DAC_T *dac, uint32_t u32Ch);
float DAC_SetDelayTime(DAC_T *dac, uint32_t u16Delay);

   

   

   







 
#line 21563 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\can.h"
 









 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\can.h"









 



 



 
 
 
 



 
 
 



 
 
 



 
 
 
typedef struct
{
    uint32_t  IdType;
    uint32_t  FrameType;
    uint32_t  Id;
    uint8_t   DLC;
    uint8_t   Data[8];
} STR_CANMSG_T;

 
 
 
typedef struct
{
    uint8_t   u8Xtd;
    uint8_t   u8Dir;
    uint32_t  u32Id;
    uint8_t   u8IdType;
} STR_CANMASK_T;




   




 










 











 










 










 












 



 
 
 
uint32_t CAN_SetBaudRate(CAN_T *tCAN, uint32_t u32BaudRate);
uint32_t CAN_Open(CAN_T *tCAN, uint32_t u32BaudRate, uint32_t u32Mode);
void CAN_Close(CAN_T *tCAN);
void CAN_CLR_INT_PENDING_BIT(CAN_T *tCAN, uint8_t u32MsgNum);
void CAN_EnableInt(CAN_T *tCAN, uint32_t u32Mask);
void CAN_DisableInt(CAN_T *tCAN, uint32_t u32Mask);
int32_t CAN_Transmit(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_Receive(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_SetMultiRxMsg(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32MsgCount, uint32_t u32IDType, uint32_t u32ID);
int32_t CAN_SetRxMsg(CAN_T *tCAN, uint32_t u32MsgNum , uint32_t u32IDType, uint32_t u32ID);
int32_t CAN_SetTxMsg(CAN_T *tCAN, uint32_t u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_TriggerTxMsg(CAN_T  *tCAN, uint32_t u32MsgNum);


   

   

   







 
#line 21564 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"








 






 



 



 
typedef struct s_usbd_info
{
    uint8_t *gu8DevDesc;             
    uint8_t *gu8ConfigDesc;          
    uint8_t *gu8StrLangDesc;         
    uint8_t *gu8StrVendorDesc;       
    uint8_t *gu8StrProductDesc;      
    uint8_t *gu8HidReportDesc;       

} S_USBD_INFO_T;

extern S_USBD_INFO_T gsInfo;

   






 



#line 57 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"


 




 
#line 76 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"

 
#line 85 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"

 



 
#line 97 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"

 







 



 
 
 














#line 140 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"




























   




 










 












 












 











 











 











 











 











 











 











 














 











 














 











 















 












 











 












 












 













 











 













 













 











 















 
static __inline void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
{
    while(size--) *dest++ = *src++;
}











 
static __inline void USBD_SetStall(uint8_t ep)
{
    uint32_t u32CfgAddr;
    uint32_t u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

        if((u32Cfg & 0xf) == ep)
        {
            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg | (0x1ul << (1)));
            break;
        }
    }
}









 
static __inline void USBD_ClearStall(uint8_t ep)
{
    uint32_t u32CfgAddr;
    uint32_t u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

        if((u32Cfg & 0xf) == ep)
        {
            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg & ~(0x1ul << (1)));
            break;
        }
    }
}











 
static __inline uint32_t USBD_GetStall(uint8_t ep)
{
    uint32_t u32CfgAddr;
    uint32_t u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));

        if((u32Cfg & 0xf) == ep)
        {
            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            break;
        }
    }

    return ((*((volatile uint32_t *)(u32CfgAddr))) & (0x1ul << (1)));
}


typedef void (*CLASS_REQ)(void);             
typedef void (*SET_INTERFACE_REQ)(void);     

 
void USBD_Open(S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface);
void USBD_Start(void);
void USBD_GetSetupPacket(uint8_t *buf);
void USBD_ProcessSetupPacket(void);
void USBD_StandardRequest(void);
void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size);
void USBD_CtrlIn(void);
void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size);
void USBD_CtrlOut(void);
void USBD_SwReset(void);


   

   

   




 
#line 21565 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"
 









 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"









 



 



 

 
 
 


 
 
 












 
 
 



 
 
 
#line 75 "..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"

 
 
 






   



 

 
 
 









 











 












 











 












 











 













 











 













 











 


 
 
 











 
static __inline void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x21;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = u32Data;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);
}













 
static __inline void FMC_Write8(uint32_t u32Addr, uint32_t u32Data0, uint32_t u32Data1)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x61;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0 = u32Data0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT1 = u32Data1;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);
}











 
static __inline uint32_t FMC_Read(uint32_t u32Addr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x00;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}












 
static __inline int32_t FMC_Erase(uint32_t u32Addr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x22;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

     
    if(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCTL & (0x1ul << (6)))
    {
        ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCTL = (0x1ul << (6));
        return -1;
    }
    return 0;
}










 
static __inline uint32_t FMC_ReadUID(uint8_t u8Index)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x04;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = (u8Index << 2);
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadCID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0B;            
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0x0;                           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));           



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0))) ;   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadDID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0C;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0;                             
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadPID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0C;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0x04;                          
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline uint32_t FMC_ReadUCID(uint32_t u32Index)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x04;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = (0x04 * u32Index) + 0x10;      
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}













 
static __inline void FMC_SetVectorPageAddr(uint32_t u32PageAddr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x2E;  
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32PageAddr;        
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;                



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);               
}













 
static __inline uint32_t FMC_GetVECMAP(void)
{
    return (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPSTS & (0x7ffful << (9)));
}











 
static __inline uint32_t FMC_GetCheckSum(uint32_t u32Addr, int32_t i32Size)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x2D;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = i32Size;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0D;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;
    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}












 
static __inline void FMC_Write256(uint32_t u32Addr, uint32_t *pu32Buf)
{
    int32_t i, idx;
    volatile uint32_t *pu32IspData;
    

    
    idx = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x27;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;

retrigger:

    
    

    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0 = pu32Buf[idx + 0];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT1 = pu32Buf[idx + 1];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT2 = pu32Buf[idx + 2];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT3 = pu32Buf[idx + 3];



    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;

    pu32IspData = &((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0;
    idx += 4;

    for(i = idx; i < 256 / 4; i += 4) 
    {

        __set_PRIMASK(1); 
        do
        {
            if((((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (0x1ul << (0))) == 0)
            {
                __set_PRIMASK(0);
                
                ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPADDR & (~0xful);
                idx = (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR - u32Addr) / 4;
                
                goto retrigger;
            }
        }
        while(((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (3 << (4)));

        
        pu32IspData[0] = pu32Buf[i  ];
        pu32IspData[1] = pu32Buf[i + 1];

        do
        {
            if((((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (0x1ul << (0))) == 0)
            {
                __set_PRIMASK(0);
                
                ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPADDR & (~0xful);
                idx = (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR - u32Addr) / 4;
                
                goto retrigger;
            }
        }
        while(((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (3 << (6)));

        
        pu32IspData[2] = pu32Buf[i + 2];
        pu32IspData[3] = pu32Buf[i + 3];
        __set_PRIMASK(0);
    }

    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPSTS & (0x1ul << (0)));
}

void FMC_Open(void);
void FMC_Close(void);
void FMC_EnableAPUpdate(void);
void FMC_DisableAPUpdate(void);
void FMC_EnableConfigUpdate(void);
void FMC_DisableConfigUpdate(void);
void FMC_EnableLDUpdate(void);
void FMC_DisableLDUpdate(void);
int32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count);
int32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count);
void FMC_SetBootSource(int32_t i32BootSrc);
int32_t FMC_GetBootSource(void);
uint32_t FMC_ReadDataFlashBaseAddr(void);
void FMC_ENABLE_FREQ_OPTIMIZE_MODE(uint32_t u32Mode);
void FMC_DISABLE_FREQ_OPTIMIZE_MODE(void);
   

   

   








#line 21566 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\uart.h"









 












 



 



 


 
 
 











 
 
 
















 
 
 




 
 
 




 
 
 






 
 
 
#line 99 "..\\..\\..\\Library\\StdDriver\\inc\\uart.h"


 
 
 




   




 











 












 












 











 











 











 













 











 












 












 












 











 











 





















 





















 




















 











 
static __inline void UART_CLEAR_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (9));
    uart->MODEM &= ~(0x1ul << (1));
}










 
static __inline void UART_SET_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (9)) | (0x1ul << (1));
}










 











 



void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag);
void UART_Close(UART_T* uart);
void UART_DisableFlowCtrl(UART_T* uart);
void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag);
void UART_EnableFlowCtrl(UART_T* uart);
void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag);
void UART_Open(UART_T* uart, uint32_t u32baudrate);
uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits);
void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC);
void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction);
void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr);
void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength);
uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes);




   

   

   







 
#line 21567 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"
 








 











 



 



 
#line 38 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"









#line 63 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"






#line 77 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

#line 86 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"














#line 108 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"





#line 119 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

#line 128 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"








   




 






 







 







 







 










 










 
#line 203 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"








 








 








 










 
#line 251 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"










 










 










 











 












 
#line 317 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"









 










 










 






























 
#line 392 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"











 


 
 
 
uint32_t PWM_ConfigCaptureChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
uint32_t PWM_ConfigOutputChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
void PWM_Start(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_Stop(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_ForceStop(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
void PWM_DisableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
uint32_t PWM_GetADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableDACTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
void PWM_DisableDACTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearDACTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
uint32_t PWM_GetDACTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableFaultBrake(PWM_T *pwm, uint32_t u32ChannelMask, uint32_t u32LevelMask, uint32_t u32BrakeSource);
void PWM_EnableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnablePDMA(PWM_T *pwm, uint32_t u32ChannelMask, uint32_t u32RisingFirst);
void PWM_DisablePDMA(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Duration);
void PWM_DisableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
void PWM_DisableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
void PWM_ClearCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
uint32_t PWM_GetCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
void PWM_DisableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_DisableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_ClearFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
uint32_t PWM_GetFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
void PWM_EnablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
void PWM_DisablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_DisableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableAcc(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntFlagCnt, uint32_t u32IntAccSrc);
void PWM_DisableAcc(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_DisableAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetAccInt(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearFTDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
uint32_t PWM_GetFTDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_EnableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
void PWM_DisableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
void PWM_ConfigSyncPhase(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32SyncSrc, uint32_t u32Direction, uint32_t u32StartPhase);
void PWM_EnableSyncPhase(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_DisableSyncPhase(PWM_T *pwm, uint32_t u32ChannelMask);
void PWM_EnableSyncNoiseFilter(PWM_T *pwm, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
void PWM_DisableSyncNoiseFilter(PWM_T *pwm);
void PWM_EnableSyncPinInverse(PWM_T *pwm);
void PWM_DisableSyncPinInverse(PWM_T *pwm);
void PWM_SetClockSource(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
void PWM_EnableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
void PWM_DisableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_EnableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
void PWM_DisableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
uint32_t PWM_GetWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
void PWM_ClearWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);


   

   

   







 
#line 21568 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"
 








 











 



 



 


 
 
 




 
 
 




 
 
 





 
 
 



#line 69 "..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

 
 
 
#line 96 "..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

   



 









 










 










 










 










 










 










 










 











 











 











 











 










 


 
 
 
void PDMA_Open(uint32_t u32Mask);
void PDMA_Close(void);
void PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount);
void PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl);
void PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr);
void PDMA_SetBurstType(uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize);
void PDMA_Trigger(uint32_t u32Ch);
void PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask);
void PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask);


   

   

   







 
#line 21569 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"
 









 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"









 



 



 
















#line 58 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"









#line 87 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"


   




 








 








 









 










 







 











 











 
















 







 







 








 




























 



























 



 
 
 
void TK_Open(void);
void TK_Close(void);
void TK_SetScanMode(uint32_t u32Mode);
void TK_ConfigSensitivity(uint32_t u32PulseWidth, uint32_t u32SenseCnt, uint32_t u32AVCCHSel);
void TK_SetCapBankPol(uint32_t u32CapBankPolSel);
void TK_EnablePolarity(uint32_t u32Mask);
void TK_DisablePolarity(uint32_t u32Mask);
void TK_SetCompCapBankData(uint32_t u32TKNum, uint32_t u32CapData);
void TK_SetRefKeyCapBankData(uint32_t u32CapData);
void TK_SetScanThreshold(uint32_t u32TKNum, uint32_t u32HighLevel, uint32_t u32LowLevel);
void TK_EnableInt(uint32_t u32Msk);
void TK_DisableInt(uint32_t u32Msk);


   

   

   







 
#line 21570 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\otg.h"
 









 



 
 
 
#line 19 "..\\..\\..\\Library\\StdDriver\\inc\\otg.h"









 



 




 



 
 
 






   




 

 
 
 







 







 








 







 







 







 







 







 









 









 




















 




















 




















 




















 













 




   

   

   








 
#line 21571 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

typedef volatile unsigned char  vu8;
typedef volatile unsigned long  vu32;
typedef volatile unsigned short vu16;




#line 21585 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

#line 21592 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

   
   







 

#line 26 "ssv7241.c"
#line 1 "ssv7241.h"






 














 
#line 26 "ssv7241.h"
#line 1 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdbool.h"
 






 





#line 25 "C:\\Keil\\ARM\\ARMCC\\bin\\..\\include\\stdbool.h"



#line 27 "ssv7241.h"
 
#line 39 "ssv7241.h"

 
#line 49 "ssv7241.h"

 
#line 58 "ssv7241.h"

 
#line 67 "ssv7241.h"

 


 
#line 105 "ssv7241.h"

 


 
#line 121 "ssv7241.h"

 
#line 133 "ssv7241.h"

 

 

 


 





 
#line 155 "ssv7241.h"

 
#line 163 "ssv7241.h"

 
#line 171 "ssv7241.h"

 


 
#line 183 "ssv7241.h"

 





#line 196 "ssv7241.h"

 















typedef struct
{
	uint8_t  num;
	uint8_t	index_old;
	uint8_t	index;
	uint8_t	rssi;
	uint8_t  BUF[29];
} RF_DATA;




extern void SSV7241_Init(void);

 
extern void SSV7241_Write_Reg(uint8_t reg,uint8_t value);
extern uint8_t SSV7241_Read_Reg(uint8_t reg);
extern void SSV7241_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len);
extern void SSV7241_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len);

 
extern void SSV7241_ClearRX_DR(void);
extern void SSV7241_ClearTX_DS(void);
extern void SSV7241_ClearTX_DS(void);

 
extern uint8_t SSV7241_RxPacket(uint8_t *rxbuf);
extern void SSV7241_TxPacket(uint8_t *txbuf, uint8_t len);
void SSV7241_TxPacketWithoutAck(uint8_t *txbuf, uint8_t len);
void SSV7241_TxACKPacket(uint8_t *txbuf, uint8_t len);

extern uint8_t SSV7241_CheckID(void);
extern void SSV7241_PowerOn(void);
extern void SSV7241_PowerOff(void);

 
extern void SSV7241_Feature_DYN_ACK(uint8_t Dyn_ack);
extern void SSV7241_Feature_DPL(uint8_t Dpl);
extern void SSV7241_Feature_ACK_PAY(uint8_t Ack_pay);

 
extern void SSV7241_EnableRSSI(void);
extern void SSV7241_DisableRSSI(void);

 
extern void SSV7241_TX_Mode(void);
extern void SSV7241_RX_Mode(void);

extern void SSV7241_SetChannel(uint8_t channel);

extern uint8_t SSV7241_isTXReady(void);
extern void SSV7241_Enable_dynamic_payload(uint8_t dpl_px);
extern void SSV7241_FlushRX(void);
extern void SSV7241_FlushTX(void);

extern void SSV7241_InitSPI(void);
extern uint8_t SPI0_communication(uint8_t SPI_byte);

extern void SSV7241_Enable(void);
extern _Bool CheckLowRSSI(void);
extern uint8_t GetRSSI(void);
extern float GetRSSIf(void);
extern void GetMatchAddress(uint8_t* RX_ADDRESS);
extern int GetSSV_TickCount(void);
extern _Bool GetMatchAddressProcess(void);


#line 29 "ssv7241.c"
#line 1 "Timer_Ctrl.h"














 
#line 19 "Timer_Ctrl.h"
#line 25 "Timer_Ctrl.h"


void ChronographSet(char Chron);
void ChronographStart(char Chron);
int32_t ChronographRead(char Chron);
int getTickCount(void);
void SetTickSSVRC(uint8_t tick);
void DelayLoop(unsigned short delay);
void DelayUsec(unsigned int usec);
void DelayMsec(unsigned short msec);
void setup_system_tick(uint32_t sampleRate);
void IncFrameCount(int inc);
uint32_t GetFrameCount(void);
uint32_t micros(void);
uint32_t millis(void);
void TIMER_Init(void);
void TIMER_Enable(char enable);
float getUpdateDT(void);
#line 30 "ssv7241.c"
#line 1 "LED.h"














 






#line 30 "LED.h"

void Laser_init(void);
void LED_Init(void);
void UpdateLED(void);
void led_arm_state(char state);
void led_mag_state(char state);
char GetLedState(void);
#line 31 "ssv7241.c"
#line 32 "ssv7241.c"
#line 1 "FlashCtrl.h"














 
#line 1 "Def.h"














 
#line 1 "Config.h"














 
#line 1 "..\\AHRSLib\\include\\AHRSLib.h"














 
#line 19 "..\\AHRSLib\\include\\AHRSLib.h"




#line 31 "..\\AHRSLib\\include\\AHRSLib.h"









#line 46 "..\\AHRSLib\\include\\AHRSLib.h"

#line 60 "..\\AHRSLib\\include\\AHRSLib.h"
void nvtGetEulerRPY(float*);
 
void nvtGetQuaternion(float*);
void nvtGetNormAttitude(float*);
void nvtGetNormACC(float*);
void nvtGetMAGHeading(float*);
void nvtGetEulerNormMAG(float*);
void nvtGetNormMAG(float*);
void nvtGetGYRODegree(float*);
void nvtGetVelocity(float* Velocity);
void nvtGetMove(float* Move);
void nvtSetMove(float* Move);
void nvtResetMove(void);

void nvtGetCalibratedGYRO(float*);
void nvtGetCalibratedACC(float*);
void nvtGetCalibratedMAG(float*);

void nvtAHRSInit(void);
void nvtUpdateAHRS(uint8_t UPDATE);
void nvtMillisecondTick(void);
void nvt100usecondTick(void);
void nvtInputSensorRawACC(int16_t *raw);
void nvtInputSensorRawGYRO(int16_t *raw);
void nvtInputSensorRawMAG(int16_t *raw);
void nvtInputSensorRawBARO(int16_t *raw);
void nvtInputSensorRaw9D(int16_t *RawACC, int16_t *RawGYRO, int16_t *RawMAG);

void nvtGetAccZWithoutGravity(float *ZWithoutGravity, float *AccZMag);
void nvtGetAccOffset(float*);
void nvtGetAccScale(float*);
void nvtGetGyroOffset(float* );
void nvtGetGyroScale(float*);
void nvtGetMagCalMatrix(float*);
void nvtSetAccOffset(float* AccMean);
void nvtSetAccScale(float* AccScale);
void nvtSetGyroOffset(float* GyroMean);
void nvtSetGyroScale(float* GyroScale);
void nvtSetGYRODegPLSB(float DPLSB);
void nvtSetAccG_PER_LSB(float G_PER_LSB);
void nvtSetMagCalMatrix(float* MagCalMatrix);

void nvtGetSensorRawACC(int16_t *raw);
void nvtGetSensorRawGYRO(int16_t *raw);
void nvtGetSensorRawMAG(int16_t *raw);
void nvtGetSensorRawBARO(uint16_t *raw);
void nvtGetSensorRaw9D(int16_t *RawACC, int16_t *RawGYRO, int16_t *RawMAG);


void nvtCalACCInit(void);
signed char nvtCalACCBufferFill(int8_t Dir);

signed char nvtGyroScaleCalibrate(int8_t axis);
signed char nvtGyroCenterCalibrate(void);
signed char nvtGyroIsSteady(void);
void nvtCalGyroInit(char axis);

signed char nvtCalMAGBufferFill(void);
void nvtCalMAGInit(void);
void nvtSetMagGaussPLSB(float);
uint8_t nvtGetMagCalQFactor(void);
void nvtSmoothSensorRawData(unsigned char enable, char sensor);



#line 19 "Config.h"



#line 28 "Config.h"
 
 
 






#line 19 "Def.h"
#line 20 "Def.h"
#line 35 "Def.h"

#line 56 "Def.h"
 
 
 

 
 
 

#line 112 "Def.h"
 
 
 

#line 132 "Def.h"

#line 145 "Def.h"







#line 19 "FlashCtrl.h"


#line 29 "FlashCtrl.h"


#line 38 "FlashCtrl.h"





void FlashInit(void);
void UpdateBoardVersion(_Bool);
uint32_t GetBoardVersion(void);
void UpdateFlashCal(int8_t sensorType, _Bool erase);
_Bool GetFlashCal(int8_t sensorType, float* Cal);
void UpdateFlashPID(_Bool erase);
_Bool GetFlashPID(float* PID_FIELD);
void UpdateFlashRxAddress(void);
_Bool GetFlashRxAddress(uint8_t* RX_ADDRESS_FIELD);
void TestFloat(void);
float GetFloatCounter(void);
int32_t float2dw(float f);
float dw2float(int32_t dw);
void FlashControl(void);
#line 33 "ssv7241.c"
#line 1 "Report.h"














 



#line 35 "Report.h"






extern char report_mode;
extern char report_format;
extern char stream_mode;
void report_sensors(void);
void report_status(void);
void CheckVersion(void);
#line 34 "ssv7241.c"







 
uint8_t TX_ADDRESS[5] = {0xE3,0xE7,0xE7,0xE7,0xE7}; 
uint8_t RX_ADDRESS[5] = {0xE3,0xE7,0xE7,0xE7,0xE7}; 
uint8_t MATCH_ADDRESS[5];
_Bool  MATCH_ADDRESS_VALID = 0;
_Bool  MATCH_ADDRESS_PROCESS = 0;
_Bool  SSV_RC_CONNECT = 0;
uint16_t NO_ACK_SEQUENCE_COUNT = 0;

const uint8_t ChannelBit[8]   = {0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80};
const uint8_t ChannelTable[8] = {77,7,75,43,73,45,70,68};

volatile uint8_t channel;
volatile uint8_t ChannelFlag;
volatile uint8_t RxState;
volatile RF_DATA RxData,RxDataOld;
volatile uint8_t NUM;

uint8_t DYN_ACKOn = 0;
uint8_t ACK_PAYOn = 0;
float RSSIf=0;
int SSV_TICKCNT=0;
#line 88 "ssv7241.c"
uint8_t Initial_Reg_Array[] = {
0x1F, 0x01, 0x00,
0x1B, 0x04, 0xD0, 0xE1, 0xD3, 0x3D,
0x19, 0x04, 0x06, 0xAA, 0x62, 0xC3,
0x1F, 0x01, 0x01,

0x18, 0x04, 0xBE, 0x6B, 0x96, 0x5B,



0x19, 0x04, 0x77, 0x48, 0x9A, 0xC8,
0x1B, 0x04, 0x76, 0x87, 0xCA, 0x01,
0x1F, 0x01, 0x02,
0x1B, 0x04, 0xA0, 0x00, 0x18, 0xA0,
0x1F, 0x01, 0x04,
0x18, 0x04, 0x01, 0x00, 0xF0, 0x00,
0x1F, 0x01, 0x05,
0x18, 0x04, 0x84, 0x03, 0x2A, 0x03,
0x19, 0x04, 0x90, 0xBF, 0x00, 0x00,
0x1A, 0x04, 0xA0, 0x0F, 0x00, 0x00,
0x1F, 0x01, 0x08,
0x19, 0x01, 0x10,
0x18, 0x04, 0x00, 0xF8, 0xFF, 0x03,
0x19, 0x01, 0x9E,
0x19, 0x01, 0xBE,
0x18, 0x04, 0x07, 0x02, 0x04, 0x00,
0x19, 0x01, 0xDE,
0x19, 0x01, 0xFE,
0x18, 0x04, 0x00, 0x7C, 0x44, 0x00,
0x19, 0x01, 0x9F,
0x19, 0x01, 0xBF,
0x18, 0x04, 0x07, 0x02, 0x04, 0x00,
0x19, 0x01, 0xDF,
0x19, 0x01, 0xFF,
0x18, 0x04, 0x11, 0xFE, 0xFF, 0x00,
0x19, 0x01, 0x1E,
0x19, 0x01, 0x3E,
0x18, 0x04, 0x01, 0x8B, 0x30, 0x08,
0x19, 0x01, 0x5E,
0x19, 0x01, 0x7E,
0x18, 0x04, 0x10, 0xFF, 0x85, 0x00,
0x19, 0x01, 0x1F,
0x19, 0x01, 0x3F,
0x18, 0x04, 0x01, 0x8B, 0x30, 0x0C,
0x19, 0x01, 0x5F,
0x19, 0x01, 0x7F,
0x19, 0x01, 0x00,
0x1F, 0x01, 0x09,
0x18, 0x04, 0x00, 0x00, 0xF4, 0xF8,
0x1F, 0x01, 0x00
};
#line 191 "ssv7241.c"

void Delay1us(uint32_t CNT)
{
	while(CNT--);
}
_Bool IsSSVRCConnected()
{
	return SSV_RC_CONNECT;
}
_Bool GetMatchAddressProcess()
{
	return MATCH_ADDRESS_PROCESS;
}
void GetMatchAddress(uint8_t* RX_ADDRESS)
{
	int8_t i;
	for(i=0;i<5;i++)
		RX_ADDRESS[i] = MATCH_ADDRESS[i];
}
void SetMatchAddress(uint8_t* RX_ADDRESS)
{
	int8_t i;
	for(i=0;i<5;i++)
		MATCH_ADDRESS[i] = RX_ADDRESS[i];
}
_Bool CheckLowRSSI()
{
	if(RxData.rssi==0)
		return 1;
	else
		return 0;
}
uint8_t GetRSSI()
{
	return RxData.rssi;
}
float GetRSSIf()
{
	return RSSIf;
}
void SSV7241_Init()
{
	uint8_t value; 
	uint32_t i = 0, j = 0, k = 0;
	uint8_t data[4];
	uint32_t array_length = sizeof(Initial_Reg_Array);

	while(i < array_length) {
		if(Initial_Reg_Array[i+1] == 0x01) {
			SSV7241_Write_Reg( 0x20 | Initial_Reg_Array[i], Initial_Reg_Array[i+2]);
			i += 3;
		}
		else { 
			k=Initial_Reg_Array[i+1];
			
			for(j = 0; j < k; j++) {
				data[j] = Initial_Reg_Array[i+2+j];
			}

			SSV7241_Write_Buf( 0x20 | Initial_Reg_Array[i], data, Initial_Reg_Array[i + 1]);
			i += 2+k;
		}
	}
	
	value = SSV7241_Read_Reg(0x00); 
	value |= (0x08 | 0x04);
	SSV7241_Write_Reg(0x20 | 0x00, value);

	if(GetFlashRxAddress(MATCH_ADDRESS)==0) {
		SetMatchAddress(RX_ADDRESS);
		MATCH_ADDRESS_PROCESS = 1;
		MATCH_ADDRESS_VALID = 0;
	}
	else
		MATCH_ADDRESS_PROCESS = 0;
	if (report_format == 0) {
	printf("MATCH_ADDRESS:%x %x %x %x %x\n",MATCH_ADDRESS[0],MATCH_ADDRESS[1],
							MATCH_ADDRESS[2],MATCH_ADDRESS[3],MATCH_ADDRESS[4]);
	printf("MATCH_ADDRESS_PROCESS:%d\n",MATCH_ADDRESS_PROCESS);
	}
	SSV7241_Write_Buf(0x20 | 0x10,MATCH_ADDRESS,5);
	SSV7241_Write_Buf(0x20 | 0x0A,MATCH_ADDRESS,5);	
	
	SSV7241_Write_Reg(0x20 | 0x01,0x01);    
	SSV7241_Write_Reg(0x20 | 0x02,0x01);
	SSV7241_Write_Reg(0x20 | 0x05,77);	
	SSV7241_Write_Reg(0x20 | 0x11,1);
	SSV7241_Enable_dynamic_payload(0x01);	
		
	SSV7241_Feature_ACK_PAY(1);
	SSV7241_Write_Reg(0x20 | 0x04,0);
	SSV7241_Write_Reg(0x20 | 0x04,0x20|0x02);	

	value = SSV7241_Read_Reg(0x06);
	value &= ~(0x08|0x20);
	value |= 0x20;
	value &= ~(0x06);
	value |= 0x06;
	SSV7241_Write_Reg(0x20 | 0x06, value); 
}

uint8_t SSV7241_CheckID(void)
{
	uint8_t ret = 0;
	uint8_t data[4];
	
	 
	SSV7241_PowerOff();
	 
	SSV7241_DisableRSSI();
	
	SSV7241_Read_Buf(0x18, data, 4); 
	
	if(data[0] == 0x41 && data[1] == 0x72)
		ret = 1;

	return ret;
}

void SSV7241_Write_Reg(uint8_t reg,uint8_t value)
{
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~((0x1ul << (3)) | (0x1ul << (2))))) | (0x1ul << (0)));
	SPI0_communication(reg);
	SPI0_communication(value);
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~(0x1ul << (3)))) | ((0x1ul << (2)) | (0x1ul << (0))));   
}

uint8_t SSV7241_Read_Reg(uint8_t reg)
{
	uint8_t value;

	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~((0x1ul << (3)) | (0x1ul << (2))))) | (0x1ul << (0)));	    
	SPI0_communication(reg);
	value = SPI0_communication(0xFF);
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~(0x1ul << (3)))) | ((0x1ul << (2)) | (0x1ul << (0)))); 

	return value;
}

void SSV7241_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
	uint8_t i;
	
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~((0x1ul << (3)) | (0x1ul << (2))))) | (0x1ul << (0)));
	SPI0_communication(reg);

	for(i = 0; i < len; i++)
		pBuf[i]=SPI0_communication(0XFF);
	
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~(0x1ul << (3)))) | ((0x1ul << (2)) | (0x1ul << (0)))); 
}

void SSV7241_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
	uint8_t i;
	
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~((0x1ul << (3)) | (0x1ul << (2))))) | (0x1ul << (0)));
	SPI0_communication(reg);
	
	for(i = 0; i < len; i++)
		SPI0_communication(*pBuf++); 
	
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~(0x1ul << (3)))) | ((0x1ul << (2)) | (0x1ul << (0))));	
}

uint8_t SSV7241_isRXReady(void)
{
	uint8_t ret = 0, state;
	
	state = SSV7241_Read_Reg(0x07);  
	if(state & 0x40)
		ret = 1;
	
	return ret;
}

uint8_t SSV7241_isTXReady(void)
{
	uint8_t ret = 0, state;
	
	state = SSV7241_Read_Reg(0x07);  
	if(state & 0x20)
		ret = 1;
	
	return ret;
}

uint8_t SSV7241_isTXFULL(void)
{
	uint8_t ret = 0, state;

	state = SSV7241_Read_Reg(0x17);
	if(state & 0x20)
		ret = 1;
	
	return ret;
}

uint8_t SSV7241_isRXEMPTY(void)
{
	uint8_t ret = 0, state;
	
	state = SSV7241_Read_Reg(0x17);
	if(state & 0x01)
		ret = 1;
	return ret;	
}

void SSV7241_ClearRX_DR(void)
{
	uint8_t state;

	state = SSV7241_Read_Reg(0x07);
	state |= 0x40;
	SSV7241_Write_Reg(0x20 | 0x07, state);
}

void SSV7241_ClearTX_DS(void)
{
	uint8_t state;
	
	state = SSV7241_Read_Reg(0x07); 
	state |= 0x20;	
	SSV7241_Write_Reg(0x20 | 0x07, state); 
}

void SSV7241_ClearMAX_RT(void)
{
	uint8_t state;
	
	state = SSV7241_Read_Reg(0x07); 
	state |= 0x10;	
	SSV7241_Write_Reg(0x20 | 0x07, state);
}

void SSV7241_FlushRX(void)
{
	SSV7241_Write_Reg(0xE2, 0xFF);
}

void SSV7241_FlushTX(void)
{
	SSV7241_Write_Reg(0xE1, 0xFF);
}

uint8_t SSV7241_RxPacket(uint8_t *rxbuf)
{
	uint8_t ret = 0, len = 0;

	if(SSV7241_isRXReady()) {
		len = SSV7241_Read_Reg(0x60);
		SSV7241_Read_Buf(0x61, rxbuf, len); 
		SSV7241_ClearRX_DR();
		SSV7241_FlushRX();
		ret = len;
	}
	
	return ret;
}

void SSV7241_TxPacket(uint8_t *txbuf, uint8_t len)
{
	
	if(!SSV7241_isTXFULL()) {
		SSV7241_FlushTX();
		
		if(!DYN_ACKOn)
			SSV7241_Write_Buf(0xA0, txbuf, len);
		else
			SSV7241_Write_Buf(0xB0, txbuf, len);
		
		(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 1;
		Delay1us(10);
		(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 0;		
	}
}

void SSV7241_TxACKPacket(uint8_t *txbuf, uint8_t len)
{ 
	
	SSV7241_FlushTX();
	SSV7241_ClearTX_DS();	
	SSV7241_Write_Buf(0xA8, txbuf, len);
}

void SSV7241_TxPacketWithoutAck(uint8_t *txbuf, uint8_t len)
{ 
	
	if(!SSV7241_isTXFULL()) {

		if(DYN_ACKOn)
			SSV7241_Write_Buf(0xA0, txbuf, len);
		else
			SSV7241_Write_Buf(0xB0, txbuf, len);
		
		(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 1;
		Delay1us(10);
		(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 0;
	}
}	

void SSV7241_RX_Mode(void)
{
	uint8_t value;
	
	value = SSV7241_Read_Reg(0x00); 
	value |= 0x01;	
	SSV7241_Write_Reg(0x20 | 0x00, value); 	
	(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 1;
}

void SSV7241_TX_Mode(void)
{
	uint8_t value;
	
	value = SSV7241_Read_Reg(0x00); 
	value &= ~0x01;
	SSV7241_Write_Reg(0x20 | 0x00, value); 
	
}

void SSV7241_PowerOn(void)
{
	uint8_t value;
	uint8_t data[4];

	value = SSV7241_Read_Reg(0x00); 
	value |= 0x02;	
	SSV7241_Write_Reg(0x20 | 0x00, value); 
	
	 
	data[0] = 0x06;
	data[1] = 0xAA;
	data[2] = 0x62;
	data[3] = 0xC3;
	SSV7241_Write_Buf( 0x20 | 0x19, data, 4);
#line 538 "ssv7241.c"
}

void SSV7241_PowerOff(void)
{
	uint8_t value;
	uint8_t data[4];
	
	value = SSV7241_Read_Reg(0x00); 
	value &= ~0x02;
	SSV7241_Write_Reg(0x20 | 0x00, value); 	
	
	 
	data[0] = 0x06;
	data[1] = 0xAA;
	data[2] = 0x62;
	data[3] = 0x43;
	SSV7241_Write_Buf( 0x20 | 0x19, data, 4);
}

void SSV7241_Feature_DYN_ACK(uint8_t Dyn_ack)
{
	uint8_t value;
	
	 
	value = SSV7241_Read_Reg(0x1D);
	
	if(Dyn_ack) {
		value |= 0x01;
		DYN_ACKOn = 1;
	}
	else {
		value &= ~0x01;
		DYN_ACKOn = 0;
	}
	
	SSV7241_Write_Reg(0x20 | 0x1D, value); 	
}

void SSV7241_Feature_DPL(uint8_t Dpl)
{
	uint8_t value;
	
	 
	value = SSV7241_Read_Reg(0x1D);
	
	if(Dpl)
		value |= 0x04;
	else
		value &= ~0x04;
	
	SSV7241_Write_Reg(0x20 | 0x1D, value); 	
}

void SSV7241_Feature_ACK_PAY(uint8_t Ack_pay)
{
	uint8_t value;
	
	 
	value = SSV7241_Read_Reg(0x1D);
	
	if(Ack_pay) {
		value |= 0x02;
		ACK_PAYOn = 1;
	}
	else {
		value &= ~0x02;
		ACK_PAYOn = 0;
	}
	
	SSV7241_Write_Reg(0x20 | 0x1D, value); 	
}

void SSV7241_EnableRSSI(void)
{
	uint8_t value;
	
	value = SSV7241_Read_Reg(0x09);
	value |= 0x10;
	
	SSV7241_Write_Reg(0x20 | 0x09, value); 	
}

void SSV7241_DisableRSSI(void)
{
	uint8_t value;
	
	value = SSV7241_Read_Reg(0x09);
	value &= ~0x10;
	
	SSV7241_Write_Reg(0x20 | 0x09, value); 	
}

void SSV7241_SetChannel(uint8_t channel)
{
	SSV7241_Write_Reg(0x20 | 0x05, channel); 
}

void SSV7241_Enable_dynamic_payload(uint8_t dpl_px)
{
	uint8_t value;
	
	SSV7241_Feature_DPL(1);
	value = SSV7241_Read_Reg(0x1C);
	value |= dpl_px;
	SSV7241_Write_Reg(0x20 | 0x1C, value); 
}

void SSV7241_InitSPI()
{
	
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL = ((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->SSCTL & (~(0x1ul << (3)))) | ((0x1ul << (2)) | (0x1ul << (0))));
	GPIO_SetMode(((GPIO_T *) ((0x40000000UL) + 0x040C0)), 0x00000004,0x1UL);
	(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 0;
	
}

uint8_t SPI0_communication(uint8_t SPI_byte)
{
	
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->TX = (SPI_byte));
	((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->CTL |= (0x1ul << (0)));

	while(SPI_GetStatus(((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)), (0x01)));
	SPI_byte=((((SPI_T *) (((0x40000000UL) + 0x00040000) + 0x20000)))->RX);
	
	return (SPI_byte);
} 


void	SSV7241_FHSS_TRIG(void)
{
		GPIO_SetMode(((GPIO_T *) ((0x40000000UL) + 0x040C0)), 0x00000008,0x0UL);
		GPIO_EnableInt(((GPIO_T *) ((0x40000000UL) + 0x040C0)), 3, 0x00000001UL);
		NVIC_EnableIRQ(EINT1_IRQn);
		channel=0;
		ChannelFlag=0xff;
		RxData.index_old=0xff;
		(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 0;
		SSV7241_SetChannel(ChannelTable[channel]);
		(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 1;
		SSV7241_ClearRX_DR();
		SSV7241_FlushRX();
		RxState=0xff;
}


void SYS_Delay_Init(uint32_t us)
{
	((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = us * CyclesPerUs;
	((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x00);
	((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2) | (1UL << 0) | (1UL << 1);
}

void SSV7241_Enable(void)
{
	 
	SSV7241_InitSPI();
	SSV7241_Init();
	SSV7241_PowerOn();
	DelayMsec(5);
	SSV7241_RX_Mode();
	SSV7241_EnableRSSI();
	SSV7241_FHSS_TRIG();
}
void match_address_process()
{
	uint8_t State = (1<<7);
	
	if(RxData.BUF[0]==0x77) {
		MATCH_ADDRESS[0] = RxData.BUF[1];
		MATCH_ADDRESS[1] = RxData.BUF[2];
		MATCH_ADDRESS[2] = RxData.BUF[3];
		MATCH_ADDRESS[3] = RxData.BUF[4];
		MATCH_ADDRESS[4] = RxData.BUF[5];	
		SSV7241_TxACKPacket(&State,1);
		if (report_format == 0)
		printf("RxData.BUF[0]:%x %x %x %x %x %x\n",RxData.BUF[0],MATCH_ADDRESS[0],MATCH_ADDRESS[1],
						MATCH_ADDRESS[2],MATCH_ADDRESS[3],MATCH_ADDRESS[4]);
	}
	else if(RxData.BUF[0]==0x88) {
		MATCH_ADDRESS_VALID = 1;
		State+=1;
		SSV7241_TxACKPacket(&State,1);
		if (report_format == 0)
		printf("RxData.BUF[0]:%x\n",RxData.BUF[0]);
	}
	
}








 
void EINT1_IRQHandler(void)
{
		































































}
int GetSSV_TickCount()
{
	return SSV_TICKCNT;
}
void SysTick_SSV(void)
{
	SetTickSSVRC(7);
	NO_ACK_SEQUENCE_COUNT++;
	SSV_TICKCNT++;
	if((MATCH_ADDRESS_VALID==1)&&(NO_ACK_SEQUENCE_COUNT>50))
		SSV_RC_CONNECT = 0;
	
	if(RxState==1) {
		ChannelFlag&=~ChannelBit[channel];
		RxData.rssi=0;
		
		if(MATCH_ADDRESS_VALID==0) {
				if(NO_ACK_SEQUENCE_COUNT>1000) {
					SetMatchAddress(RX_ADDRESS);
					SSV7241_Write_Buf(0x20 | 0x10,MATCH_ADDRESS,5);
					SSV7241_Write_Buf(0x20 | 0x0A,MATCH_ADDRESS,5);	
					MATCH_ADDRESS_PROCESS = 1;	
					MATCH_ADDRESS_VALID = 0;
					
					
				}
		}
				
	}
	else if(RxState==2) {
		uint8_t i;
		
		i=RxData.rssi;
		SSV7241_TxACKPacket(&i,1);
		SSV7241_Write_Reg(0x20 | 0x01,0x01);	
		RxData.num=NUM;
	}
	
	if(ChannelFlag==0) {
		channel=0;
		ChannelFlag=0xff;
		RxState=0xff;
		SSV7241_Write_Reg(0x20 | 0x01,0x01); 
	}
	else {
		do {
			channel++;
			
			if(channel>=8) channel=0;
		} while((ChannelBit[channel]&ChannelFlag)==0);
		
		RxState=1;
	}
	
	(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 0;
	SSV7241_SetChannel(ChannelTable[channel]);
	(*((volatile uint32_t *)((((0x40000000UL) + 0x04800)+(0x40*(3))) + ((2)<<2)))) = 1;
	SSV7241_ClearRX_DR();
	SSV7241_FlushRX();
}



